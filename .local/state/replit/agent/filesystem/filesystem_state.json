{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nGayriCRM is a modern, mobile-compatible Progressive Web Application (PWA) designed specifically for real estate offices focusing on land and parcel management. The system provides comprehensive CRM functionality including user management, client management, property management, document handling, transaction tracking, reporting, and accounting modules. Built with a dashboard-centric approach, the application features a responsive design optimized for both desktop and mobile use.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe client-side architecture is built with React and Vite, utilizing a modern component-based approach:\n\n- **React Framework**: Uses Vite as the build tool for fast development and optimized production builds\n- **UI Components**: Implements shadcn/ui component library with Radix UI primitives for consistent, accessible design\n- **Styling**: Tailwind CSS for utility-first styling with custom CSS variables for theming\n- **State Management**: TanStack Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n- **Charts**: Recharts for data visualization components\n- **PWA Features**: Service worker implementation for offline capabilities and app-like experience\n\n## Backend Architecture\n\nThe server-side follows a Node.js Express pattern with TypeScript:\n\n- **Express.js Server**: RESTful API architecture with middleware-based request handling\n- **Authentication**: Passport.js with local strategy for session-based authentication\n- **Session Management**: PostgreSQL-backed session storage using connect-pg-simple\n- **Database Layer**: Drizzle ORM for type-safe database operations\n- **Route Protection**: Role-based access control with admin and consultant permissions\n- **Request Logging**: Custom middleware for API request tracking and performance monitoring\n\n## Data Storage Solutions\n\nDatabase architecture uses PostgreSQL with Drizzle ORM:\n\n- **Primary Database**: PostgreSQL via Neon serverless connection\n- **Schema Design**: Seven main entities (users, clients, properties, transactions, documents, reports, accounting)\n- **Relationships**: Foreign key relationships between entities (consultant assignments, property ownership, transaction participants)\n- **Migration System**: Drizzle Kit for schema migrations and database versioning\n- **Type Safety**: Drizzle-Zod integration for runtime validation matching database schema\n\n## Authentication and Authorization\n\nMulti-layered security implementation:\n\n- **Session-Based Auth**: Express sessions with PostgreSQL storage for persistence\n- **Password Security**: Scrypt-based password hashing with salt for secure storage\n- **Role-Based Access**: Two-tier system with admin (full access) and consultant (restricted to own data)\n- **Route Protection**: Middleware guards on both API endpoints and frontend routes\n- **User Context**: React context for authentication state management across components\n\n## API Structure\n\nRESTful API design with consistent patterns:\n\n- **Resource-Based Endpoints**: Standard CRUD operations for each entity (/api/clients, /api/properties, etc.)\n- **Dashboard Analytics**: Specialized endpoints for aggregated statistics and metrics\n- **Role-Specific Data**: Automatic filtering based on user permissions (consultants see only their data)\n- **Error Handling**: Centralized error middleware with consistent response formatting\n- **Request Validation**: Zod schema validation for all incoming data\n\n# External Dependencies\n\n## Database Services\n\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Database ORM**: Drizzle ORM for type-safe database interactions\n- **Migration Tool**: Drizzle Kit for schema management and deployment\n\n## UI and Styling Libraries\n\n- **shadcn/ui**: Pre-built component library with Radix UI primitives\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Radix UI**: Low-level UI primitives for accessibility and customization\n- **Lucide React**: Icon library for consistent iconography\n\n## Development and Build Tools\n\n- **Vite**: Frontend build tool with hot module replacement\n- **TypeScript**: Type safety across both frontend and backend\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Autoprefixer for browser compatibility\n\n## Runtime Dependencies\n\n- **TanStack Query**: Server state management and caching\n- **Recharts**: Chart library for data visualization\n- **React Hook Form**: Form state management with validation\n- **Wouter**: Lightweight routing solution\n- **bcryptjs**: Password hashing utility\n- **date-fns**: Date manipulation and formatting\n\n## PWA Technologies\n\n- **Service Worker**: Custom implementation for offline functionality\n- **Web App Manifest**: Configuration for installable web app experience\n- **Cache Strategies**: Static and dynamic caching for performance optimization","size_bytes":5086},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"public/sw.js":{"content":"const CACHE_NAME = 'gayricrm-v1.0.0';\nconst STATIC_CACHE = 'gayricrm-static-v1.0.0';\nconst DYNAMIC_CACHE = 'gayricrm-dynamic-v1.0.0';\n\n// Static assets to cache\nconst staticAssets = [\n  '/',\n  '/manifest.json',\n  '/icons/icon-192.png',\n  '/icons/icon-512.png',\n  'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap'\n];\n\n// API endpoints to cache\nconst apiEndpoints = [\n  '/api/user',\n  '/api/dashboard/stats',\n  '/api/clients',\n  '/api/properties',\n  '/api/transactions',\n  '/api/documents',\n  '/api/reports'\n];\n\n// Install event - cache static assets\nself.addEventListener('install', (event) => {\n  console.log('Service Worker installing...');\n  \n  event.waitUntil(\n    caches.open(STATIC_CACHE)\n      .then((cache) => {\n        console.log('Caching static assets');\n        return cache.addAll(staticAssets);\n      })\n      .then(() => {\n        return self.skipWaiting();\n      })\n      .catch((error) => {\n        console.error('Error caching static assets:', error);\n      })\n  );\n});\n\n// Activate event - cleanup old caches\nself.addEventListener('activate', (event) => {\n  console.log('Service Worker activating...');\n  \n  event.waitUntil(\n    caches.keys()\n      .then((cacheNames) => {\n        return Promise.all(\n          cacheNames\n            .filter((cacheName) => {\n              return cacheName.startsWith('gayricrm-') && \n                     cacheName !== STATIC_CACHE && \n                     cacheName !== DYNAMIC_CACHE;\n            })\n            .map((cacheName) => {\n              console.log('Deleting old cache:', cacheName);\n              return caches.delete(cacheName);\n            })\n        );\n      })\n      .then(() => {\n        return self.clients.claim();\n      })\n  );\n});\n\n// Fetch event - network first strategy for API, cache first for static\nself.addEventListener('fetch', (event) => {\n  const { request } = event;\n  const url = new URL(request.url);\n  \n  // Skip non-GET requests\n  if (request.method !== 'GET') {\n    return;\n  }\n  \n  // Skip Chrome extension requests\n  if (url.protocol === 'chrome-extension:') {\n    return;\n  }\n  \n  // API requests - Network first strategy\n  if (url.pathname.startsWith('/api/')) {\n    event.respondWith(\n      networkFirstStrategy(request)\n    );\n    return;\n  }\n  \n  // Static assets and app shell - Cache first strategy\n  if (isStaticAsset(url) || isAppShell(url)) {\n    event.respondWith(\n      cacheFirstStrategy(request)\n    );\n    return;\n  }\n  \n  // Everything else - Network first with cache fallback\n  event.respondWith(\n    networkWithCacheFallback(request)\n  );\n});\n\n// Network first strategy (for API calls)\nasync function networkFirstStrategy(request) {\n  try {\n    const response = await fetch(request);\n    \n    // Only cache successful API responses\n    if (response.ok && shouldCacheApiResponse(request.url)) {\n      const cache = await caches.open(DYNAMIC_CACHE);\n      cache.put(request, response.clone());\n    }\n    \n    return response;\n  } catch (error) {\n    console.log('Network failed, trying cache:', request.url);\n    \n    const cachedResponse = await caches.match(request);\n    if (cachedResponse) {\n      return cachedResponse;\n    }\n    \n    // Return offline page for navigation requests\n    if (request.mode === 'navigate') {\n      return caches.match('/') || new Response('Offline', { status: 503 });\n    }\n    \n    throw error;\n  }\n}\n\n// Cache first strategy (for static assets)\nasync function cacheFirstStrategy(request) {\n  const cachedResponse = await caches.match(request);\n  \n  if (cachedResponse) {\n    return cachedResponse;\n  }\n  \n  try {\n    const response = await fetch(request);\n    const cache = await caches.open(STATIC_CACHE);\n    cache.put(request, response.clone());\n    return response;\n  } catch (error) {\n    console.error('Failed to fetch and cache:', request.url, error);\n    throw error;\n  }\n}\n\n// Network with cache fallback\nasync function networkWithCacheFallback(request) {\n  try {\n    const response = await fetch(request);\n    \n    // Cache successful responses\n    if (response.ok) {\n      const cache = await caches.open(DYNAMIC_CACHE);\n      cache.put(request, response.clone());\n    }\n    \n    return response;\n  } catch (error) {\n    const cachedResponse = await caches.match(request);\n    if (cachedResponse) {\n      return cachedResponse;\n    }\n    \n    // Return app shell for navigation requests\n    if (request.mode === 'navigate') {\n      return caches.match('/');\n    }\n    \n    throw error;\n  }\n}\n\n// Helper functions\nfunction isStaticAsset(url) {\n  return url.pathname.match(/\\.(js|css|png|jpg|jpeg|gif|svg|ico|woff|woff2|ttf|eot)$/) ||\n         url.hostname === 'fonts.googleapis.com' ||\n         url.hostname === 'fonts.gstatic.com';\n}\n\nfunction isAppShell(url) {\n  return url.pathname === '/' || \n         url.pathname === '/manifest.json' ||\n         url.pathname.startsWith('/icons/');\n}\n\nfunction shouldCacheApiResponse(url) {\n  // Only cache GET requests to specific endpoints\n  return apiEndpoints.some(endpoint => url.includes(endpoint));\n}\n\n// Background sync for offline actions\nself.addEventListener('sync', (event) => {\n  console.log('Background sync triggered:', event.tag);\n  \n  if (event.tag === 'background-sync') {\n    event.waitUntil(syncData());\n  }\n});\n\nasync function syncData() {\n  console.log('Syncing offline data...');\n  // TODO: Implement offline data sync logic\n  // This would sync any offline changes when connection is restored\n}\n\n// Push notifications (for future implementation)\nself.addEventListener('push', (event) => {\n  console.log('Push notification received:', event);\n  \n  const options = {\n    body: event.data?.text() || 'Yeni bildirim',\n    icon: '/icons/icon-192.png',\n    badge: '/icons/icon-72.png',\n    vibrate: [200, 100, 200],\n    data: {\n      dateOfArrival: Date.now(),\n      primaryKey: 1\n    },\n    actions: [\n      {\n        action: 'explore',\n        title: 'Görüntüle',\n        icon: '/icons/icon-72.png'\n      },\n      {\n        action: 'close',\n        title: 'Kapat',\n        icon: '/icons/icon-72.png'\n      }\n    ]\n  };\n  \n  event.waitUntil(\n    self.registration.showNotification('GayriCRM', options)\n  );\n});\n\n// Notification click handler\nself.addEventListener('notificationclick', (event) => {\n  console.log('Notification click received:', event);\n  \n  event.notification.close();\n  \n  if (event.action === 'explore') {\n    event.waitUntil(\n      clients.openWindow('/')\n    );\n  }\n});\n\n// Error handling\nself.addEventListener('error', (event) => {\n  console.error('Service Worker error:', event.error);\n});\n\nself.addEventListener('unhandledrejection', (event) => {\n  console.error('Service Worker unhandled promise rejection:', event.reason);\n});\n\nconsole.log('Service Worker loaded successfully');\n","size_bytes":6755},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(\n      {\n        usernameField: 'email',\n        passwordField: 'password'\n      },\n      async (email, password, done) => {\n        const user = await storage.getUserByEmail(email);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false);\n        } else {\n          // Update last login\n          await storage.updateUser(user.id, { son_giris: new Date() });\n          return done(null, user);\n        }\n      }\n    ),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    done(null, user);\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { email, username, password, ad, soyad, telefon, rol = \"consultant\" } = req.body;\n\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Bu e-posta adresi zaten kullanılıyor\" });\n      }\n\n      const existingUsername = await storage.getUserByUsername(username);\n      if (existingUsername) {\n        return res.status(400).json({ message: \"Bu kullanıcı adı zaten kullanılıyor\" });\n      }\n\n      const user = await storage.createUser({\n        ad,\n        soyad,\n        email,\n        username,\n        telefon,\n        rol,\n        password: await hashPassword(password),\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json(user);\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Kayıt sırasında bir hata oluştu\" });\n    }\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n","size_bytes":3471},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth } from \"./auth\";\nimport { \n  insertClientSchema, \n  consultantUpdateClientSchema,\n  insertPropertySchema, \n  insertTransactionSchema,\n  insertDocumentSchema,\n  insertReportSchema,\n  insertAccountingSchema,\n  insertUserSchema,\n  type User\n} from \"@shared/schema\";\n\n// Extend Express Request type\ndeclare module 'express-serve-static-core' {\n  interface Request {\n    user?: User;\n  }\n}\n\nfunction requireAuth(req: Request, res: Response, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Giriş yapmanız gerekiyor\" });\n  }\n  next();\n}\n\nfunction requireAdmin(req: Request, res: Response, next: any) {\n  if (!req.isAuthenticated() || !req.user || req.user.rol !== \"admin\") {\n    return res.status(403).json({ message: \"Bu işlem için admin yetkisi gerekiyor\" });\n  }\n  next();\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  setupAuth(app);\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const consultantId = req.user?.rol === \"consultant\" ? req.user.id : undefined;\n      const stats = await storage.getDashboardStats(consultantId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Dashboard stats error:\", error);\n      res.status(500).json({ message: \"Dashboard verileri alınırken hata oluştu\" });\n    }\n  });\n\n  // Clients routes\n  app.get(\"/api/clients\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const clients = req.user?.rol === \"admin\" \n        ? await storage.getAllClients()\n        : await storage.getClientsByConsultant(req.user!.id);\n      res.json(clients);\n    } catch (error) {\n      console.error(\"Get clients error:\", error);\n      res.status(500).json({ message: \"Müşteriler alınırken hata oluştu\" });\n    }\n  });\n\n  app.post(\"/api/clients\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      // Secure RBAC: For consultants, always enforce their own ID as danisman_id\n      const danisman_id = req.user!.rol === \"admin\" \n        ? req.body.danisman_id || req.user!.id \n        : req.user!.id; // Force consultant's own ID\n\n      const validatedData = insertClientSchema.parse({\n        ...req.body,\n        danisman_id,\n        olusturan_kullanici: req.user!.id,\n      });\n\n      const client = await storage.createClient(validatedData);\n      res.status(201).json(client);\n    } catch (error) {\n      console.error(\"Create client error:\", error);\n      if (error && typeof error === 'object' && 'name' in error && error.name === \"ZodError\") {\n        return res.status(400).json({ message: \"Geçersiz müşteri verisi\", errors: (error as any).errors });\n      }\n      res.status(500).json({ message: \"Müşteri oluşturulurken hata oluştu\" });\n    }\n  });\n\n  app.put(\"/api/clients/:id\", requireAuth, async (req, res) => {\n    try {\n      const client = await storage.getClient(req.params.id);\n      if (!client) {\n        return res.status(404).json({ message: \"Müşteri bulunamadı\" });\n      }\n\n      // Check permissions\n      if (req.user?.rol !== \"admin\" && client.danisman_id !== req.user?.id) {\n        return res.status(403).json({ message: \"Bu müşteriyi düzenleme yetkiniz yok\" });\n      }\n\n      // Secure RBAC: Use restricted schema for consultants to prevent protected field manipulation\n      const validatedData = req.user?.rol === \"admin\" \n        ? insertClientSchema.partial().parse(req.body)\n        : consultantUpdateClientSchema.parse(req.body);\n\n      const updatedClient = await storage.updateClient(req.params.id, validatedData);\n      res.json(updatedClient);\n    } catch (error) {\n      console.error(\"Update client error:\", error);\n      if (error && typeof error === 'object' && 'name' in error && error.name === \"ZodError\") {\n        return res.status(400).json({ message: \"Geçersiz güncelleme verisi\", errors: (error as any).errors });\n      }\n      res.status(500).json({ message: \"Müşteri güncellenirken hata oluştu\" });\n    }\n  });\n\n  app.delete(\"/api/clients/:id\", requireAuth, async (req, res) => {\n    try {\n      const client = await storage.getClient(req.params.id);\n      if (!client) {\n        return res.status(404).json({ message: \"Müşteri bulunamadı\" });\n      }\n\n      // Check permissions\n      if (req.user?.rol !== \"admin\" && client.danisman_id !== req.user?.id) {\n        return res.status(403).json({ message: \"Bu müşteriyi silme yetkiniz yok\" });\n      }\n\n      await storage.deleteClient(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete client error:\", error);\n      res.status(500).json({ message: \"Müşteri silinirken hata oluştu\" });\n    }\n  });\n\n  // Properties routes\n  app.get(\"/api/properties\", requireAuth, async (req, res) => {\n    try {\n      const properties = req.user?.rol === \"admin\" \n        ? await storage.getAllProperties()\n        : await storage.getPropertiesByConsultant(req.user!.id);\n      res.json(properties);\n    } catch (error) {\n      console.error(\"Get properties error:\", error);\n      res.status(500).json({ message: \"Gayrimenkuller alınırken hata oluştu\" });\n    }\n  });\n\n  app.post(\"/api/properties\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertPropertySchema.parse({\n        ...req.body,\n        danisman_id: req.body.danisman_id || req.user!.id,\n      });\n\n      const property = await storage.createProperty(validatedData);\n      res.status(201).json(property);\n    } catch (error) {\n      console.error(\"Create property error:\", error);\n      res.status(500).json({ message: \"Gayrimenkul oluşturulurken hata oluştu\" });\n    }\n  });\n\n  app.put(\"/api/properties/:id\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const property = await storage.getProperty(req.params.id);\n      if (!property) {\n        return res.status(404).json({ message: \"Gayrimenkul bulunamadı\" });\n      }\n\n      // Check permissions\n      if (req.user?.rol !== \"admin\" && property.danisman_id !== req.user?.id) {\n        return res.status(403).json({ message: \"Bu gayrimenkulü düzenleme yetkiniz yok\" });\n      }\n\n      const validatedData = insertPropertySchema.partial().parse(req.body);\n      const updatedProperty = await storage.updateProperty(req.params.id, validatedData);\n      res.json(updatedProperty);\n    } catch (error) {\n      console.error(\"Update property error:\", error);\n      res.status(500).json({ message: \"Gayrimenkul güncellenirken hata oluştu\" });\n    }\n  });\n\n  app.delete(\"/api/properties/:id\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const property = await storage.getProperty(req.params.id);\n      if (!property) {\n        return res.status(404).json({ message: \"Gayrimenkul bulunamadı\" });\n      }\n\n      // Check permissions\n      if (req.user?.rol !== \"admin\" && property.danisman_id !== req.user?.id) {\n        return res.status(403).json({ message: \"Bu gayrimenkulü silme yetkiniz yok\" });\n      }\n\n      await storage.deleteProperty(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete property error:\", error);\n      res.status(500).json({ message: \"Gayrimenkul silinirken hata oluştu\" });\n    }\n  });\n\n  // Transactions routes\n  app.get(\"/api/transactions\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const transactions = req.user?.rol === \"admin\" \n        ? await storage.getAllTransactions()\n        : await storage.getTransactionsByConsultant(req.user!.id);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Get transactions error:\", error);\n      res.status(500).json({ message: \"İşlemler alınırken hata oluştu\" });\n    }\n  });\n\n  app.post(\"/api/transactions\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertTransactionSchema.parse({\n        ...req.body,\n        danisman_id: req.body.danisman_id || req.user!.id,\n      });\n\n      const transaction = await storage.createTransaction(validatedData);\n      res.status(201).json(transaction);\n    } catch (error) {\n      console.error(\"Create transaction error:\", error);\n      res.status(500).json({ message: \"İşlem oluşturulurken hata oluştu\" });\n    }\n  });\n\n  // Users routes (Admin only)\n  app.get(\"/api/users\", requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Get users error:\", error);\n      res.status(500).json({ message: \"Kullanıcılar alınırken hata oluştu\" });\n    }\n  });\n\n  app.post(\"/api/users\", requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      \n      // Check if username or email already exists\n      const existingUser = await storage.getUserByUsername(validatedData.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Bu kullanıcı adı zaten kullanılıyor\" });\n      }\n      \n      const existingEmail = await storage.getUserByEmail(validatedData.email);\n      if (existingEmail) {\n        return res.status(400).json({ message: \"Bu e-posta adresi zaten kullanılıyor\" });\n      }\n\n      const user = await storage.createUser(validatedData);\n      res.status(201).json(user);\n    } catch (error) {\n      console.error(\"Create user error:\", error);\n      if (error && typeof error === 'object' && 'name' in error && error.name === \"ZodError\") {\n        return res.status(400).json({ message: \"Geçersiz kullanıcı verisi\", errors: (error as any).errors });\n      }\n      res.status(500).json({ message: \"Kullanıcı oluşturulurken hata oluştu\" });\n    }\n  });\n\n  // Documents routes\n  app.get(\"/api/documents\", requireAuth, async (req, res) => {\n    try {\n      const documents = await storage.getAllDocuments();\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Get documents error:\", error);\n      res.status(500).json({ message: \"Belgeler alınırken hata oluştu\" });\n    }\n  });\n\n  app.post(\"/api/documents\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertDocumentSchema.parse({\n        ...req.body,\n        olusturan: req.user!.id,\n      });\n\n      const document = await storage.createDocument(validatedData);\n      res.status(201).json(document);\n    } catch (error) {\n      console.error(\"Create document error:\", error);\n      res.status(500).json({ message: \"Belge oluşturulurken hata oluştu\" });\n    }\n  });\n\n  // Reports routes\n  app.get(\"/api/reports\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const reports = req.user?.rol === \"admin\"\n        ? await storage.getAllReports()\n        : await storage.getReportsByConsultant(req.user!.id);\n      res.json(reports);\n    } catch (error) {\n      console.error(\"Get reports error:\", error);\n      res.status(500).json({ message: \"Raporlar alınırken hata oluştu\" });\n    }\n  });\n\n  // Accounting routes (Admin only)\n  app.get(\"/api/accounting\", requireAdmin, async (req, res) => {\n    try {\n      const accounting = await storage.getAllAccounting();\n      res.json(accounting);\n    } catch (error) {\n      console.error(\"Get accounting error:\", error);\n      res.status(500).json({ message: \"Muhasebe verileri alınırken hata oluştu\" });\n    }\n  });\n\n  app.post(\"/api/accounting\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertAccountingSchema.parse(req.body);\n      const accounting = await storage.createAccounting(validatedData);\n      res.status(201).json(accounting);\n    } catch (error) {\n      console.error(\"Create accounting error:\", error);\n      res.status(500).json({ message: \"Muhasebe kaydı oluşturulurken hata oluştu\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12059},"server/storage.ts":{"content":"import { \n  users, clients, properties, transactions, documents, reports, accounting,\n  type User, type InsertUser, type UpdateUser, type Client, type InsertClient,\n  type Property, type InsertProperty, type Transaction, type InsertTransaction,\n  type Document, type InsertDocument, type Report, type InsertReport,\n  type Accounting, type InsertAccounting\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\ntype SessionStore = any; // session.Store;\n\nconst PostgresSessionStore = connectPg(session);\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<UpdateUser>): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  \n  // Clients\n  getClient(id: string): Promise<Client | undefined>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: string, client: Partial<InsertClient>): Promise<Client>;\n  deleteClient(id: string): Promise<void>;\n  getClientsByConsultant(consultantId: string): Promise<Client[]>;\n  getAllClients(): Promise<Client[]>;\n  \n  // Properties\n  getProperty(id: string): Promise<Property | undefined>;\n  createProperty(property: InsertProperty): Promise<Property>;\n  updateProperty(id: string, property: Partial<InsertProperty>): Promise<Property>;\n  deleteProperty(id: string): Promise<void>;\n  getPropertiesByConsultant(consultantId: string): Promise<Property[]>;\n  getAllProperties(): Promise<Property[]>;\n  \n  // Transactions\n  getTransaction(id: string): Promise<Transaction | undefined>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  updateTransaction(id: string, transaction: Partial<InsertTransaction>): Promise<Transaction>;\n  deleteTransaction(id: string): Promise<void>;\n  getTransactionsByConsultant(consultantId: string): Promise<Transaction[]>;\n  getAllTransactions(): Promise<Transaction[]>;\n  \n  // Documents\n  getDocument(id: string): Promise<Document | undefined>;\n  createDocument(document: InsertDocument): Promise<Document>;\n  updateDocument(id: string, document: Partial<InsertDocument>): Promise<Document>;\n  deleteDocument(id: string): Promise<void>;\n  getDocumentsByProperty(propertyId: string): Promise<Document[]>;\n  getAllDocuments(): Promise<Document[]>;\n  \n  // Reports\n  getReport(id: string): Promise<Report | undefined>;\n  createReport(report: InsertReport): Promise<Report>;\n  getReportsByConsultant(consultantId: string): Promise<Report[]>;\n  getAllReports(): Promise<Report[]>;\n  \n  // Accounting\n  getAccounting(id: string): Promise<Accounting | undefined>;\n  createAccounting(accounting: InsertAccounting): Promise<Accounting>;\n  getAccountingByMonthYear(month: number, year: number): Promise<Accounting[]>;\n  getAllAccounting(): Promise<Accounting[]>;\n  \n  // Dashboard stats\n  getDashboardStats(consultantId?: string): Promise<{\n    totalRevenue: string;\n    totalTransactions: number;\n    totalClients: number;\n    totalProperties: number;\n  }>;\n  \n  sessionStore: SessionStore;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: SessionStore;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ \n      pool, \n      createTableIfMissing: true \n    });\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...insertUser,\n        guncellenme_tarihi: new Date(),\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updateUser: Partial<UpdateUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        ...updateUser,\n        guncellenme_tarihi: new Date(),\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.olusturulma_tarihi));\n  }\n\n  // Clients\n  async getClient(id: string): Promise<Client | undefined> {\n    const [client] = await db.select().from(clients).where(eq(clients.id, id));\n    return client || undefined;\n  }\n\n  async createClient(insertClient: InsertClient): Promise<Client> {\n    const [client] = await db\n      .insert(clients)\n      .values({\n        ...insertClient,\n        guncellenme_tarihi: new Date(),\n      })\n      .returning();\n    return client;\n  }\n\n  async updateClient(id: string, updateClient: Partial<InsertClient>): Promise<Client> {\n    const [client] = await db\n      .update(clients)\n      .set({\n        ...updateClient,\n        guncellenme_tarihi: new Date(),\n      })\n      .where(eq(clients.id, id))\n      .returning();\n    return client;\n  }\n\n  async deleteClient(id: string): Promise<void> {\n    await db.delete(clients).where(eq(clients.id, id));\n  }\n\n  async getClientsByConsultant(consultantId: string): Promise<Client[]> {\n    return await db\n      .select()\n      .from(clients)\n      .where(eq(clients.danisman_id, consultantId))\n      .orderBy(desc(clients.olusturulma_tarihi));\n  }\n\n  async getAllClients(): Promise<Client[]> {\n    return await db.select().from(clients).orderBy(desc(clients.olusturulma_tarihi));\n  }\n\n  // Properties\n  async getProperty(id: string): Promise<Property | undefined> {\n    const [property] = await db.select().from(properties).where(eq(properties.id, id));\n    return property || undefined;\n  }\n\n  async createProperty(insertProperty: InsertProperty): Promise<Property> {\n    const [property] = await db\n      .insert(properties)\n      .values({\n        ...insertProperty,\n        son_guncelleme_tarihi: new Date(),\n      })\n      .returning();\n    return property;\n  }\n\n  async updateProperty(id: string, updateProperty: Partial<InsertProperty>): Promise<Property> {\n    const [property] = await db\n      .update(properties)\n      .set({\n        ...updateProperty,\n        son_guncelleme_tarihi: new Date(),\n      })\n      .where(eq(properties.id, id))\n      .returning();\n    return property;\n  }\n\n  async deleteProperty(id: string): Promise<void> {\n    await db.delete(properties).where(eq(properties.id, id));\n  }\n\n  async getPropertiesByConsultant(consultantId: string): Promise<Property[]> {\n    return await db\n      .select()\n      .from(properties)\n      .where(eq(properties.danisman_id, consultantId))\n      .orderBy(desc(properties.olusturulma_tarihi));\n  }\n\n  async getAllProperties(): Promise<Property[]> {\n    return await db.select().from(properties).orderBy(desc(properties.olusturulma_tarihi));\n  }\n\n  // Transactions\n  async getTransaction(id: string): Promise<Transaction | undefined> {\n    const [transaction] = await db.select().from(transactions).where(eq(transactions.id, id));\n    return transaction || undefined;\n  }\n\n  async createTransaction(insertTransaction: InsertTransaction): Promise<Transaction> {\n    const [transaction] = await db\n      .insert(transactions)\n      .values({\n        ...insertTransaction,\n        guncellenme_tarihi: new Date(),\n      })\n      .returning();\n    return transaction;\n  }\n\n  async updateTransaction(id: string, updateTransaction: Partial<InsertTransaction>): Promise<Transaction> {\n    const [transaction] = await db\n      .update(transactions)\n      .set({\n        ...updateTransaction,\n        guncellenme_tarihi: new Date(),\n      })\n      .where(eq(transactions.id, id))\n      .returning();\n    return transaction;\n  }\n\n  async deleteTransaction(id: string): Promise<void> {\n    await db.delete(transactions).where(eq(transactions.id, id));\n  }\n\n  async getTransactionsByConsultant(consultantId: string): Promise<Transaction[]> {\n    return await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.danisman_id, consultantId))\n      .orderBy(desc(transactions.olusturulma_tarihi));\n  }\n\n  async getAllTransactions(): Promise<Transaction[]> {\n    return await db.select().from(transactions).orderBy(desc(transactions.olusturulma_tarihi));\n  }\n\n  // Documents\n  async getDocument(id: string): Promise<Document | undefined> {\n    const [document] = await db.select().from(documents).where(eq(documents.id, id));\n    return document || undefined;\n  }\n\n  async createDocument(insertDocument: InsertDocument): Promise<Document> {\n    const [document] = await db\n      .insert(documents)\n      .values({\n        ...insertDocument,\n        guncellenme_tarihi: new Date(),\n      })\n      .returning();\n    return document;\n  }\n\n  async updateDocument(id: string, updateDocument: Partial<InsertDocument>): Promise<Document> {\n    const [document] = await db\n      .update(documents)\n      .set({\n        ...updateDocument,\n        guncellenme_tarihi: new Date(),\n      })\n      .where(eq(documents.id, id))\n      .returning();\n    return document;\n  }\n\n  async deleteDocument(id: string): Promise<void> {\n    await db.delete(documents).where(eq(documents.id, id));\n  }\n\n  async getDocumentsByProperty(propertyId: string): Promise<Document[]> {\n    return await db\n      .select()\n      .from(documents)\n      .where(eq(documents.gayrimenkul_id, propertyId))\n      .orderBy(desc(documents.olusturulma_tarihi));\n  }\n\n  async getAllDocuments(): Promise<Document[]> {\n    return await db.select().from(documents).orderBy(desc(documents.olusturulma_tarihi));\n  }\n\n  // Reports\n  async getReport(id: string): Promise<Report | undefined> {\n    const [report] = await db.select().from(reports).where(eq(reports.id, id));\n    return report || undefined;\n  }\n\n  async createReport(insertReport: InsertReport): Promise<Report> {\n    const [report] = await db\n      .insert(reports)\n      .values(insertReport)\n      .returning();\n    return report;\n  }\n\n  async getReportsByConsultant(consultantId: string): Promise<Report[]> {\n    return await db\n      .select()\n      .from(reports)\n      .where(eq(reports.danisman_id, consultantId))\n      .orderBy(desc(reports.olusturulma_tarihi));\n  }\n\n  async getAllReports(): Promise<Report[]> {\n    return await db.select().from(reports).orderBy(desc(reports.olusturulma_tarihi));\n  }\n\n  // Accounting\n  async getAccounting(id: string): Promise<Accounting | undefined> {\n    const [accountingRecord] = await db.select().from(accounting).where(eq(accounting.id, id));\n    return accountingRecord || undefined;\n  }\n\n  async createAccounting(insertAccounting: InsertAccounting): Promise<Accounting> {\n    const [accountingRecord] = await db\n      .insert(accounting)\n      .values({\n        ...insertAccounting,\n        guncellenme_tarihi: new Date(),\n      })\n      .returning();\n    return accountingRecord;\n  }\n\n  async getAccountingByMonthYear(month: number, year: number): Promise<Accounting[]> {\n    return await db\n      .select()\n      .from(accounting)\n      .where(and(eq(accounting.ay, month), eq(accounting.yil, year)))\n      .orderBy(desc(accounting.olusturulma_tarihi));\n  }\n\n  async getAllAccounting(): Promise<Accounting[]> {\n    return await db.select().from(accounting).orderBy(desc(accounting.olusturulma_tarihi));\n  }\n\n  // Dashboard stats\n  async getDashboardStats(consultantId?: string): Promise<{\n    totalRevenue: string;\n    totalTransactions: number;\n    totalClients: number;\n    totalProperties: number;\n  }> {\n    const transactionFilter = consultantId ? eq(transactions.danisman_id, consultantId) : undefined;\n    const clientFilter = consultantId ? eq(clients.danisman_id, consultantId) : undefined;\n    const propertyFilter = consultantId ? eq(properties.danisman_id, consultantId) : undefined;\n\n    // Calculate total revenue\n    const revenueResult = await db\n      .select({\n        total: sql<string>`COALESCE(SUM(${transactions.tutar}), 0)::text`,\n      })\n      .from(transactions)\n      .where(transactionFilter);\n\n    // Count transactions\n    const transactionResult = await db\n      .select({\n        count: sql<number>`COUNT(*)::int`,\n      })\n      .from(transactions)\n      .where(transactionFilter);\n\n    // Count clients\n    const clientResult = await db\n      .select({\n        count: sql<number>`COUNT(*)::int`,\n      })\n      .from(clients)\n      .where(clientFilter);\n\n    // Count properties\n    const propertyResult = await db\n      .select({\n        count: sql<number>`COUNT(*)::int`,\n      })\n      .from(properties)\n      .where(propertyFilter);\n\n    return {\n      totalRevenue: revenueResult[0]?.total || \"0\",\n      totalTransactions: transactionResult[0]?.count || 0,\n      totalClients: clientResult[0]?.count || 0,\n      totalProperties: propertyResult[0]?.count || 0,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":13275},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean, uuid, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ad: text(\"ad\").notNull(),\n  soyad: text(\"soyad\").notNull(),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  telefon: text(\"telefon\"),\n  rol: text(\"rol\").notNull().default(\"consultant\"), // admin, consultant\n  departman: text(\"departman\"),\n  password: text(\"password\").notNull(),\n  son_giris: timestamp(\"son_giris\"),\n  durum: boolean(\"durum\").default(true),\n  foto: text(\"foto\"),\n  notlar: text(\"notlar\"),\n  olusturulma_tarihi: timestamp(\"olusturulma_tarihi\").defaultNow(),\n  guncellenme_tarihi: timestamp(\"guncellenme_tarihi\").defaultNow(),\n  ciro: decimal(\"ciro\", { precision: 15, scale: 2 }).default(\"0\"),\n  ciro_ofis_payi: decimal(\"ciro_ofis_payi\", { precision: 15, scale: 2 }).default(\"0\"),\n  ciro_danisman_payi: decimal(\"ciro_danisman_payi\", { precision: 15, scale: 2 }).default(\"0\"),\n  ciro_danisman_yuzde: decimal(\"ciro_danisman_yuzde\", { precision: 5, scale: 2 }).default(\"3\"),\n  islem_sayisi: integer(\"islem_sayisi\").default(0),\n});\n\n// Clients table\nexport const clients = pgTable(\"clients\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ad: text(\"ad\").notNull(),\n  soyad: text(\"soyad\").notNull(),\n  tc_kimlik_no: text(\"tc_kimlik_no\"),\n  telefon: text(\"telefon\"),\n  email: text(\"email\"),\n  adres: text(\"adres\"),\n  cinsiyet: text(\"cinsiyet\"),\n  meslek: text(\"meslek\"),\n  sirket_adi: text(\"sirket_adi\"),\n  vergi_no: text(\"vergi_no\"),\n  iban: text(\"iban\"),\n  notlar: text(\"notlar\"),\n  durum: text(\"durum\").default(\"aktif\"), // aktif, pasif, bekleyen\n  danisman_id: uuid(\"danisman_id\").references(() => users.id),\n  yonlendiren_id: uuid(\"yonlendiren_id\").references(() => users.id),\n  olusturan_kullanici: uuid(\"olusturan_kullanici\").references(() => users.id),\n  olusturulma_tarihi: timestamp(\"olusturulma_tarihi\").defaultNow(),\n  guncellenme_tarihi: timestamp(\"guncellenme_tarihi\").defaultNow(),\n});\n\n// Properties table\nexport const properties = pgTable(\"properties\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  gayrimenkul_id: text(\"gayrimenkul_id\").unique(),\n  il: text(\"il\").notNull(),\n  ilce: text(\"ilce\").notNull(),\n  mahalle: text(\"mahalle\"),\n  ada_no: text(\"ada_no\"),\n  parsel_no: text(\"parsel_no\"),\n  alan_m2: decimal(\"alan_m2\", { precision: 10, scale: 2 }),\n  tur: text(\"tur\").default(\"arsa\"), // arsa, arazi, bina\n  imar_plani_turu: text(\"imar_plani_turu\"),\n  taks: decimal(\"taks\", { precision: 5, scale: 2 }),\n  kaks: decimal(\"kaks\", { precision: 5, scale: 2 }),\n  maksimum_yukseklik: decimal(\"maksimum_yukseklik\", { precision: 5, scale: 2 }),\n  malik_id: uuid(\"malik_id\").references(() => clients.id),\n  onceki_malik_id: uuid(\"onceki_malik_id\").references(() => clients.id),\n  danisman_id: uuid(\"danisman_id\").references(() => users.id),\n  edinme_tarihi: timestamp(\"edinme_tarihi\"),\n  alis_fiyati: decimal(\"alis_fiyati\", { precision: 15, scale: 2 }),\n  tapu_bedeli: decimal(\"tapu_bedeli\", { precision: 15, scale: 2 }),\n  tapu_satis_bedeli: decimal(\"tapu_satis_bedeli\", { precision: 15, scale: 2 }),\n  degerleme_fiyati: decimal(\"degerleme_fiyati\", { precision: 15, scale: 2 }),\n  ilan_fiyati: decimal(\"ilan_fiyati\", { precision: 15, scale: 2 }),\n  koordinatlar: jsonb(\"koordinatlar\"), // {lat, lng}\n  fotograf_url: text(\"fotograf_url\"),\n  foto_360: text(\"foto_360\"),\n  ilan_tarihi: timestamp(\"ilan_tarihi\"),\n  son_guncelleme_tarihi: timestamp(\"son_guncelleme_tarihi\").defaultNow(),\n  notlar: text(\"notlar\"),\n  durum: text(\"durum\").default(\"aktif\"), // aktif, satildi, beklemede, iptal\n  kullanim_durumu: text(\"kullanim_durumu\"),\n  tapu_durumu: text(\"tapu_durumu\"),\n  ipotek_durumu: text(\"ipotek_durumu\"),\n  olusturulma_tarihi: timestamp(\"olusturulma_tarihi\").defaultNow(),\n});\n\n// Documents table\nexport const documents = pgTable(\"documents\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  belge_id: text(\"belge_id\").unique(),\n  gayrimenkul_id: uuid(\"gayrimenkul_id\").references(() => properties.id),\n  islem_id: uuid(\"islem_id\"),\n  belge_turu: text(\"belge_turu\").notNull(),\n  noter: text(\"noter\"),\n  vekil: text(\"vekil\"),\n  vekalet_tarihi: timestamp(\"vekalet_tarihi\"),\n  vekalet_bitis: timestamp(\"vekalet_bitis\"),\n  yetkili_makam: text(\"yetkili_makam\"),\n  malik: text(\"malik\"),\n  tapu_tarihi: timestamp(\"tapu_tarihi\"),\n  onceki_malik_id: uuid(\"onceki_malik_id\").references(() => clients.id),\n  dosya_url: text(\"dosya_url\"),\n  dosya_turu: text(\"dosya_turu\"),\n  dosya_boyutu: integer(\"dosya_boyutu\"),\n  yuklenme_tarihi: timestamp(\"yuklenme_tarihi\").defaultNow(),\n  duzenlenme_tarihi: timestamp(\"duzenlenme_tarihi\"),\n  duzenleyen_kurum: text(\"duzenleyen_kurum\"),\n  imzalayan: text(\"imzalayan\"),\n  imza_tarihi: timestamp(\"imza_tarihi\"),\n  onaylayan: text(\"onaylayan\"),\n  onay_tarihi: timestamp(\"onay_tarihi\"),\n  dogrulama_kodu: text(\"dogrulama_kodu\"),\n  sozlesme_id: text(\"sozlesme_id\"),\n  olusturan: uuid(\"olusturan\").references(() => users.id),\n  olusturulma_tarihi: timestamp(\"olusturulma_tarihi\").defaultNow(),\n  guncellenme_tarihi: timestamp(\"guncellenme_tarihi\").defaultNow(),\n  gizlilik: text(\"gizlilik\").default(\"public\"), // public, private\n  notlar: text(\"notlar\"),\n  durum: text(\"durum\").default(\"aktif\"),\n});\n\n// Transactions table\nexport const transactions = pgTable(\"transactions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  islem_id: text(\"islem_id\").unique(),\n  gayrimenkul_id: uuid(\"gayrimenkul_id\").references(() => properties.id),\n  alici_id: uuid(\"alici_id\").references(() => clients.id),\n  satici_id: uuid(\"satici_id\").references(() => clients.id),\n  danisman_id: uuid(\"danisman_id\").references(() => users.id),\n  islem_tarihi: timestamp(\"islem_tarihi\").defaultNow(),\n  tutar: decimal(\"tutar\", { precision: 15, scale: 2 }).notNull(),\n  para_birimi: text(\"para_birimi\").default(\"TRY\"),\n  durum: text(\"durum\").default(\"beklemede\"), // beklemede, tamamlandi, iptal\n  olusturulma_tarihi: timestamp(\"olusturulma_tarihi\").defaultNow(),\n  guncellenme_tarihi: timestamp(\"guncellenme_tarihi\").defaultNow(),\n  odeme_yontemi: text(\"odeme_yontemi\"),\n  odeme_durumu: text(\"odeme_durumu\").default(\"bekleyen\"),\n  komisyon_orani: decimal(\"komisyon_orani\", { precision: 5, scale: 2 }).default(\"3\"),\n  komisyon_tutari: decimal(\"komisyon_tutari\", { precision: 15, scale: 2 }),\n  vergi_tutari: decimal(\"vergi_tutari\", { precision: 15, scale: 2 }),\n  net_tutar: decimal(\"net_tutar\", { precision: 15, scale: 2 }),\n  sozlesme_id: text(\"sozlesme_id\"),\n  notlar: text(\"notlar\"),\n});\n\n// Reports table\nexport const reports = pgTable(\"reports\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  rapor_turu: text(\"rapor_turu\").notNull(), // ciro, islem, fatura, musteri_sayisi, portfoy_sayisi, yatirimci_raporu\n  baslik: text(\"baslik\").notNull(),\n  icerik: jsonb(\"icerik\"),\n  danisman_id: uuid(\"danisman_id\").references(() => users.id),\n  tarih_baslangic: timestamp(\"tarih_baslangic\"),\n  tarih_bitis: timestamp(\"tarih_bitis\"),\n  olusturan: uuid(\"olusturan\").references(() => users.id),\n  olusturulma_tarihi: timestamp(\"olusturulma_tarihi\").defaultNow(),\n  durum: text(\"durum\").default(\"aktif\"),\n});\n\n// Accounting table\nexport const accounting = pgTable(\"accounting\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ay: integer(\"ay\").notNull(),\n  yil: integer(\"yil\").notNull(),\n  toplam_ciro: decimal(\"toplam_ciro\", { precision: 15, scale: 2 }).default(\"0\"),\n  ofis_payi: decimal(\"ofis_payi\", { precision: 15, scale: 2 }).default(\"0\"),\n  aylik_gelirler: decimal(\"aylik_gelirler\", { precision: 15, scale: 2 }).default(\"0\"),\n  aylik_giderler_sabit: decimal(\"aylik_giderler_sabit\", { precision: 15, scale: 2 }).default(\"0\"),\n  giderler: decimal(\"giderler\", { precision: 15, scale: 2 }).default(\"0\"),\n  gider_adi: text(\"gider_adi\"),\n  aylik_brut: decimal(\"aylik_brut\", { precision: 15, scale: 2 }).default(\"0\"),\n  aylik_net: decimal(\"aylik_net\", { precision: 15, scale: 2 }).default(\"0\"),\n  vergiler: decimal(\"vergiler\", { precision: 15, scale: 2 }).default(\"0\"),\n  vergi_turu: text(\"vergi_turu\"),\n  odemeler: decimal(\"odemeler\", { precision: 15, scale: 2 }).default(\"0\"),\n  odeme_turu: text(\"odeme_turu\"),\n  olusturulma_tarihi: timestamp(\"olusturulma_tarihi\").defaultNow(),\n  guncellenme_tarihi: timestamp(\"guncellenme_tarihi\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  clients: many(clients, { relationName: \"danisman\" }),\n  properties: many(properties),\n  transactions: many(transactions),\n  documents: many(documents),\n  reports: many(reports),\n}));\n\nexport const clientsRelations = relations(clients, ({ one, many }) => ({\n  danisman: one(users, {\n    fields: [clients.danisman_id],\n    references: [users.id],\n    relationName: \"danisman\",\n  }),\n  yonlendiren: one(users, {\n    fields: [clients.yonlendiren_id],\n    references: [users.id],\n  }),\n  olusturan: one(users, {\n    fields: [clients.olusturan_kullanici],\n    references: [users.id],\n  }),\n  properties: many(properties),\n  transactions_as_buyer: many(transactions, { relationName: \"alici\" }),\n  transactions_as_seller: many(transactions, { relationName: \"satici\" }),\n}));\n\nexport const propertiesRelations = relations(properties, ({ one, many }) => ({\n  malik: one(clients, {\n    fields: [properties.malik_id],\n    references: [clients.id],\n  }),\n  onceki_malik: one(clients, {\n    fields: [properties.onceki_malik_id],\n    references: [clients.id],\n  }),\n  danisman: one(users, {\n    fields: [properties.danisman_id],\n    references: [users.id],\n  }),\n  documents: many(documents),\n  transactions: many(transactions),\n}));\n\nexport const transactionsRelations = relations(transactions, ({ one }) => ({\n  gayrimenkul: one(properties, {\n    fields: [transactions.gayrimenkul_id],\n    references: [properties.id],\n  }),\n  alici: one(clients, {\n    fields: [transactions.alici_id],\n    references: [clients.id],\n    relationName: \"alici\",\n  }),\n  satici: one(clients, {\n    fields: [transactions.satici_id],\n    references: [clients.id],\n    relationName: \"satici\",\n  }),\n  danisman: one(users, {\n    fields: [transactions.danisman_id],\n    references: [users.id],\n  }),\n}));\n\nexport const documentsRelations = relations(documents, ({ one }) => ({\n  gayrimenkul: one(properties, {\n    fields: [documents.gayrimenkul_id],\n    references: [properties.id],\n  }),\n  onceki_malik: one(clients, {\n    fields: [documents.onceki_malik_id],\n    references: [clients.id],\n  }),\n  olusturan: one(users, {\n    fields: [documents.olusturan],\n    references: [users.id],\n  }),\n}));\n\nexport const reportsRelations = relations(reports, ({ one }) => ({\n  danisman: one(users, {\n    fields: [reports.danisman_id],\n    references: [users.id],\n  }),\n  olusturan: one(users, {\n    fields: [reports.olusturan],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  olusturulma_tarihi: true,\n  guncellenme_tarihi: true,\n  son_giris: true,\n});\n\n// Update schema for users (includes son_giris field)\nexport const updateUserSchema = createInsertSchema(users).omit({\n  id: true,\n  olusturulma_tarihi: true,\n  guncellenme_tarihi: true,\n}).partial();\n\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  olusturulma_tarihi: true,\n  guncellenme_tarihi: true,\n});\n\n// Restricted update schema for consultants - omits protected fields\nexport const consultantUpdateClientSchema = insertClientSchema.omit({\n  danisman_id: true,\n  yonlendiren_id: true,\n  olusturan_kullanici: true,\n}).partial();\n\nexport const insertPropertySchema = createInsertSchema(properties).omit({\n  id: true,\n  olusturulma_tarihi: true,\n  son_guncelleme_tarihi: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  olusturulma_tarihi: true,\n  guncellenme_tarihi: true,\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).omit({\n  id: true,\n  olusturulma_tarihi: true,\n  guncellenme_tarihi: true,\n  yuklenme_tarihi: true,\n});\n\nexport const insertReportSchema = createInsertSchema(reports).omit({\n  id: true,\n  olusturulma_tarihi: true,\n});\n\nexport const insertAccountingSchema = createInsertSchema(accounting).omit({\n  id: true,\n  olusturulma_tarihi: true,\n  guncellenme_tarihi: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpdateUser = z.infer<typeof updateUserSchema>;\nexport type Client = typeof clients.$inferSelect;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type Property = typeof properties.$inferSelect;\nexport type InsertProperty = z.infer<typeof insertPropertySchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Document = typeof documents.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\nexport type Report = typeof reports.$inferSelect;\nexport type InsertReport = z.infer<typeof insertReportSchema>;\nexport type Accounting = typeof accounting.$inferSelect;\nexport type InsertAccounting = z.infer<typeof insertAccountingSchema>;\n","size_bytes":13494},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\n\n// Pages\nimport NotFound from \"@/pages/not-found\";\nimport AuthPage from \"@/pages/auth-page\";\nimport DashboardPage from \"@/pages/dashboard-page\";\nimport ClientsPage from \"@/pages/clients-page\";\nimport PropertiesPage from \"@/pages/properties-page\";\nimport TransactionsPage from \"@/pages/transactions-page\";\nimport DocumentsPage from \"@/pages/documents-page\";\nimport ReportsPage from \"@/pages/reports-page\";\nimport UsersPage from \"@/pages/users-page\";\nimport AccountingPage from \"@/pages/accounting-page\";\n\n// Layout\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { useState } from \"react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nfunction DashboardLayout({ children }: { children: React.ReactNode }) {\n  const { user } = useAuth();\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const isMobile = useIsMobile();\n\n  if (!user) return null;\n\n  const getPageTitle = (pathname: string) => {\n    const titles: Record<string, string> = {\n      \"/\": \"Dashboard\",\n      \"/clients\": \"Müşteriler\",\n      \"/properties\": \"Gayrimenkuller\", \n      \"/transactions\": \"İşlemler\",\n      \"/documents\": \"Belgeler\",\n      \"/reports\": \"Raporlar\",\n      \"/users\": \"Kullanıcı Yönetimi\",\n      \"/accounting\": \"Muhasebe\",\n    };\n    return titles[pathname] || \"Dashboard\";\n  };\n\n  const handleMenuClick = () => {\n    setIsSidebarOpen(!isSidebarOpen);\n  };\n\n  const closeSidebar = () => {\n    setIsSidebarOpen(false);\n  };\n\n  return (\n    <div className=\"h-screen flex overflow-hidden\">\n      {/* Mobile overlay */}\n      {isMobile && isSidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 z-40 md:hidden\"\n          onClick={closeSidebar}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <div className={`${isMobile ? 'fixed z-50' : 'relative'} h-full`}>\n        <Sidebar \n          isMobileOpen={isSidebarOpen} \n          onMobileClose={closeSidebar} \n        />\n      </div>\n\n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header\n          title={getPageTitle(window.location.pathname)}\n          onMenuClick={handleMenuClick}\n        />\n        <main className=\"flex-1 overflow-auto bg-background\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/auth\" component={AuthPage} />\n      \n      <ProtectedRoute \n        path=\"/\" \n        component={() => (\n          <DashboardLayout>\n            <DashboardPage />\n          </DashboardLayout>\n        )} \n      />\n      \n      <ProtectedRoute \n        path=\"/clients\" \n        component={() => (\n          <DashboardLayout>\n            <ClientsPage />\n          </DashboardLayout>\n        )} \n      />\n      \n      <ProtectedRoute \n        path=\"/properties\" \n        component={() => (\n          <DashboardLayout>\n            <PropertiesPage />\n          </DashboardLayout>\n        )} \n      />\n      \n      <ProtectedRoute \n        path=\"/transactions\" \n        component={() => (\n          <DashboardLayout>\n            <TransactionsPage />\n          </DashboardLayout>\n        )} \n      />\n      \n      <ProtectedRoute \n        path=\"/documents\" \n        component={() => (\n          <DashboardLayout>\n            <DocumentsPage />\n          </DashboardLayout>\n        )} \n      />\n      \n      <ProtectedRoute \n        path=\"/reports\" \n        component={() => (\n          <DashboardLayout>\n            <ReportsPage />\n          </DashboardLayout>\n        )} \n      />\n      \n      <ProtectedRoute \n        path=\"/users\" \n        component={() => (\n          <DashboardLayout>\n            <UsersPage />\n          </DashboardLayout>\n        )} \n      />\n      \n      <ProtectedRoute \n        path=\"/accounting\" \n        component={() => (\n          <DashboardLayout>\n            <AccountingPage />\n          </DashboardLayout>\n        )} \n      />\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4684},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, RegisterData>;\n};\n\ntype LoginData = {\n  email: string;\n  password: string;\n};\n\ntype RegisterData = {\n  ad: string;\n  soyad: string;\n  email: string;\n  username: string;\n  password: string;\n  telefon?: string;\n  rol?: string;\n};\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Başarılı\",\n        description: \"Giriş yapıldı\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Giriş başarısız\",\n        description: \"E-posta veya parola hatalı\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: RegisterData) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Başarılı\",\n        description: \"Hesap oluşturuldu ve giriş yapıldı\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Kayıt başarısız\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Başarılı\",\n        description: \"Çıkış yapıldı\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Çıkış başarısız\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3328},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen bg-background\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}\n","size_bytes":721},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/accounting-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Eye, Edit, Plus, Calculator, TrendingUp, TrendingDown, DollarSign } from \"lucide-react\";\nimport { Accounting } from \"@shared/schema\";\nimport { StatCard } from \"@/components/ui/stat-card\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Shield } from \"lucide-react\";\n\nexport default function AccountingPage() {\n  const { user: currentUser } = useAuth();\n\n  // Only admins can access this page\n  if (currentUser?.rol !== \"admin\") {\n    return (\n      <div className=\"p-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <Shield className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h2 className=\"text-xl font-semibold mb-2\">Erişim Engellendi</h2>\n              <p className=\"text-muted-foreground\">\n                Bu sayfaya erişim için admin yetkisi gerekiyor.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const { data: accounting = [], isLoading } = useQuery<Accounting[]>({\n    queryKey: [\"/api/accounting\"],\n  });\n\n  const formatCurrency = (value: string | null) => {\n    if (!value) return \"₺0\";\n    const num = parseFloat(value);\n    return `₺${num.toLocaleString('tr-TR')}`;\n  };\n\n  const getMonthName = (month: number) => {\n    const months = [\n      \"Ocak\", \"Şubat\", \"Mart\", \"Nisan\", \"Mayıs\", \"Haziran\",\n      \"Temmuz\", \"Ağustos\", \"Eylül\", \"Ekim\", \"Kasım\", \"Aralık\"\n    ];\n    return months[month - 1] || `Ay ${month}`;\n  };\n\n  // Calculate summary stats\n  const totalRevenue = accounting.reduce((sum, acc) => sum + parseFloat(acc.toplam_ciro || \"0\"), 0);\n  const totalExpenses = accounting.reduce((sum, acc) => sum + parseFloat(acc.giderler || \"0\"), 0);\n  const totalNet = accounting.reduce((sum, acc) => sum + parseFloat(acc.aylik_net || \"0\"), 0);\n  const totalTaxes = accounting.reduce((sum, acc) => sum + parseFloat(acc.vergiler || \"0\"), 0);\n\n  const columns = [\n    {\n      key: \"period\",\n      header: \"Dönem\",\n      render: (accounting: Accounting) => (\n        <div>\n          <p className=\"font-medium\">{getMonthName(accounting.ay)} {accounting.yil}</p>\n          <p className=\"text-xs text-muted-foreground\">{accounting.ay}/{accounting.yil}</p>\n        </div>\n      ),\n    },\n    {\n      key: \"toplam_ciro\",\n      header: \"Toplam Ciro\",\n      render: (accounting: Accounting) => (\n        <span className=\"font-semibold text-accent\">\n          {formatCurrency(accounting.toplam_ciro)}\n        </span>\n      ),\n    },\n    {\n      key: \"giderler\",\n      header: \"Giderler\",\n      render: (accounting: Accounting) => (\n        <span className=\"font-semibold text-destructive\">\n          {formatCurrency(accounting.giderler)}\n        </span>\n      ),\n    },\n    {\n      key: \"vergiler\",\n      header: \"Vergiler\",\n      render: (accounting: Accounting) => (\n        <span className=\"font-semibold text-secondary\">\n          {formatCurrency(accounting.vergiler)}\n        </span>\n      ),\n    },\n    {\n      key: \"aylik_net\",\n      header: \"Net Kar\",\n      render: (accounting: Accounting) => {\n        const net = parseFloat(accounting.aylik_net || \"0\");\n        return (\n          <span className={`font-semibold ${net >= 0 ? 'text-accent' : 'text-destructive'}`}>\n            {formatCurrency(accounting.aylik_net)}\n          </span>\n        );\n      },\n    },\n    {\n      key: \"actions\",\n      header: \"İşlemler\",\n      render: (accounting: Accounting) => (\n        <div className=\"flex items-center space-x-2\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            data-testid={`view-accounting-${accounting.id}`}\n          >\n            <Eye className=\"h-4 w-4\" />\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            data-testid={`edit-accounting-${accounting.id}`}\n          >\n            <Edit className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  const handleAddRecord = () => {\n    // TODO: Implement add accounting record modal\n    console.log(\"Add accounting record modal\");\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-semibold text-foreground\">Muhasebe</h1>\n        <p className=\"text-muted-foreground\">\n          Ofis muhasebe kayıtlarını yönetin ve finansal durumu takip edin\n        </p>\n      </div>\n\n      {/* Financial Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <StatCard\n          title=\"Toplam Ciro\"\n          value={formatCurrency(totalRevenue.toString())}\n          change=\"+8.2%\"\n          changeType=\"positive\"\n          icon={DollarSign}\n          iconBgColor=\"bg-accent/10\"\n        />\n        \n        <StatCard\n          title=\"Toplam Gider\"\n          value={formatCurrency(totalExpenses.toString())}\n          change=\"+3.1%\"\n          changeType=\"negative\"\n          icon={TrendingDown}\n          iconBgColor=\"bg-destructive/10\"\n        />\n        \n        <StatCard\n          title=\"Net Kar\"\n          value={formatCurrency(totalNet.toString())}\n          change=\"+12.5%\"\n          changeType=\"positive\"\n          icon={TrendingUp}\n          iconBgColor=\"bg-primary/10\"\n        />\n        \n        <StatCard\n          title=\"Vergi\"\n          value={formatCurrency(totalTaxes.toString())}\n          icon={Calculator}\n          iconBgColor=\"bg-secondary/10\"\n        />\n      </div>\n\n      {/* Monthly P&L Summary */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle>Aylık Kar/Zarar</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {accounting.slice(0, 6).map((record) => {\n                const revenue = parseFloat(record.toplam_ciro || \"0\");\n                const expenses = parseFloat(record.giderler || \"0\");\n                const net = parseFloat(record.aylik_net || \"0\");\n                \n                return (\n                  <div key={record.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <p className=\"font-medium\">{getMonthName(record.ay)} {record.yil}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Ciro: {formatCurrency(record.toplam_ciro)} | \n                        Gider: {formatCurrency(record.giderler)}\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className={`font-semibold ${net >= 0 ? 'text-accent' : 'text-destructive'}`}>\n                        {formatCurrency(record.aylik_net)}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {((net / revenue) * 100).toFixed(1)}% kar marjı\n                      </p>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Bu Ay Özeti</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Brüt Gelir</span>\n                <span className=\"font-semibold text-accent\">₺425.000</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Sabit Giderler</span>\n                <span className=\"font-semibold text-destructive\">₺85.000</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Değişken Giderler</span>\n                <span className=\"font-semibold text-destructive\">₺45.000</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Vergiler</span>\n                <span className=\"font-semibold text-secondary\">₺65.000</span>\n              </div>\n              <hr />\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-medium\">Net Kar</span>\n                <span className=\"font-bold text-accent\">₺230.000</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Accounting Records Table */}\n      <DataTable\n        data={accounting}\n        columns={columns}\n        searchPlaceholder=\"Muhasebe kaydı ara...\"\n        onAdd={handleAddRecord}\n        addButtonText=\"Kayıt Ekle\"\n        isLoading={isLoading}\n      />\n    </div>\n  );\n}\n","size_bytes":9099},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Building } from \"lucide-react\";\nimport { Redirect } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Geçerli bir e-posta adresi giriniz\"),\n  password: z.string().min(1, \"Parola gereklidir\"),\n});\n\nconst registerSchema = z.object({\n  ad: z.string().min(2, \"Ad en az 2 karakter olmalıdır\"),\n  soyad: z.string().min(2, \"Soyad en az 2 karakter olmalıdır\"),\n  email: z.string().email(\"Geçerli bir e-posta adresi giriniz\"),\n  username: z.string().min(3, \"Kullanıcı adı en az 3 karakter olmalıdır\"),\n  password: z.string().min(6, \"Parola en az 6 karakter olmalıdır\"),\n  telefon: z.string().optional(),\n  rol: z.enum([\"admin\", \"consultant\"], { required_error: \"Rol seçimi zorunludur\" }),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"login\");\n\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: { email: \"\", password: \"\" },\n  });\n\n  const registerForm = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: { ad: \"\", soyad: \"\", email: \"\", username: \"\", password: \"\", telefon: \"\", rol: \"consultant\" },\n  });\n\n  // Redirect if already logged in\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const onLogin = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegister = (data: RegisterFormData) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Left side - Auth forms */}\n      <div className=\"flex-1 flex items-center justify-center px-6 py-12 bg-background\">\n        <div className=\"w-full max-w-md\">\n          {/* Logo */}\n          <div className=\"text-center mb-8\">\n            <div className=\"mx-auto h-16 w-16 bg-primary rounded-xl flex items-center justify-center mb-4\">\n              <Building className=\"h-8 w-8 text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-foreground\">GayriCRM</h1>\n            <p className=\"text-muted-foreground mt-1\">Gayrimenkul Yönetim Sistemi</p>\n          </div>\n\n          <Card className=\"border shadow-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-center\">Hesabınıza Giriş Yapın</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Tabs value={activeTab} onValueChange={setActiveTab}>\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"login\" data-testid=\"login-tab\">Giriş Yap</TabsTrigger>\n                  <TabsTrigger value=\"register\" data-testid=\"register-tab\">Kayıt Ol</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"login\" className=\"space-y-4\">\n                  <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"email\">E-posta</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        placeholder=\"ornek@gayricrm.com\"\n                        {...loginForm.register(\"email\")}\n                        data-testid=\"input-email\"\n                      />\n                      {loginForm.formState.errors.email && (\n                        <p className=\"text-sm text-destructive mt-1\">\n                          {loginForm.formState.errors.email.message}\n                        </p>\n                      )}\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"password\">Parola</Label>\n                      <Input\n                        id=\"password\"\n                        type=\"password\"\n                        placeholder=\"••••••••\"\n                        {...loginForm.register(\"password\")}\n                        data-testid=\"input-password\"\n                      />\n                      {loginForm.formState.errors.password && (\n                        <p className=\"text-sm text-destructive mt-1\">\n                          {loginForm.formState.errors.password.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={loginMutation.isPending}\n                      data-testid=\"button-login\"\n                    >\n                      {loginMutation.isPending ? \"Giriş yapılıyor...\" : \"Giriş Yap\"}\n                    </Button>\n                  </form>\n                </TabsContent>\n\n                <TabsContent value=\"register\" className=\"space-y-4\">\n                  <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"ad\">Ad</Label>\n                        <Input\n                          id=\"ad\"\n                          placeholder=\"Adınız\"\n                          {...registerForm.register(\"ad\")}\n                          data-testid=\"input-firstname\"\n                        />\n                        {registerForm.formState.errors.ad && (\n                          <p className=\"text-sm text-destructive mt-1\">\n                            {registerForm.formState.errors.ad.message}\n                          </p>\n                        )}\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"soyad\">Soyad</Label>\n                        <Input\n                          id=\"soyad\"\n                          placeholder=\"Soyadınız\"\n                          {...registerForm.register(\"soyad\")}\n                          data-testid=\"input-lastname\"\n                        />\n                        {registerForm.formState.errors.soyad && (\n                          <p className=\"text-sm text-destructive mt-1\">\n                            {registerForm.formState.errors.soyad.message}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"register-email\">E-posta</Label>\n                      <Input\n                        id=\"register-email\"\n                        type=\"email\"\n                        placeholder=\"ornek@gayricrm.com\"\n                        {...registerForm.register(\"email\")}\n                        data-testid=\"input-register-email\"\n                      />\n                      {registerForm.formState.errors.email && (\n                        <p className=\"text-sm text-destructive mt-1\">\n                          {registerForm.formState.errors.email.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"username\">Kullanıcı Adı</Label>\n                      <Input\n                        id=\"username\"\n                        placeholder=\"kullaniciadi\"\n                        {...registerForm.register(\"username\")}\n                        data-testid=\"input-username\"\n                      />\n                      {registerForm.formState.errors.username && (\n                        <p className=\"text-sm text-destructive mt-1\">\n                          {registerForm.formState.errors.username.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"telefon\">Telefon (Opsiyonel)</Label>\n                      <Input\n                        id=\"telefon\"\n                        placeholder=\"05XX XXX XX XX\"\n                        {...registerForm.register(\"telefon\")}\n                        data-testid=\"input-phone\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"rol\">Rol</Label>\n                      <Select \n                        onValueChange={(value) => registerForm.setValue(\"rol\", value as \"admin\" | \"consultant\")}\n                        defaultValue={registerForm.getValues(\"rol\")}\n                      >\n                        <SelectTrigger data-testid=\"select-role\">\n                          <SelectValue placeholder=\"Rol seçiniz\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"consultant\" data-testid=\"option-consultant\">Emlak Danışmanı</SelectItem>\n                          <SelectItem value=\"admin\" data-testid=\"option-admin\">Yönetici</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      {registerForm.formState.errors.rol && (\n                        <p className=\"text-sm text-destructive mt-1\">\n                          {registerForm.formState.errors.rol.message}\n                        </p>\n                      )}\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"register-password\">Parola</Label>\n                      <Input\n                        id=\"register-password\"\n                        type=\"password\"\n                        placeholder=\"••••••••\"\n                        {...registerForm.register(\"password\")}\n                        data-testid=\"input-register-password\"\n                      />\n                      {registerForm.formState.errors.password && (\n                        <p className=\"text-sm text-destructive mt-1\">\n                          {registerForm.formState.errors.password.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={registerMutation.isPending}\n                      data-testid=\"button-register\"\n                    >\n                      {registerMutation.isPending ? \"Kayıt oluşturuluyor...\" : \"Kayıt Ol\"}\n                    </Button>\n                  </form>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Right side - Hero section */}\n      <div className=\"hidden lg:flex flex-1 bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-blue-950 dark:to-indigo-950 items-center justify-center p-12\">\n        <div className=\"max-w-md text-center\">\n          <div className=\"h-24 w-24 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-6\">\n            <Building className=\"h-12 w-12 text-primary-foreground\" />\n          </div>\n          <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n            Modern Gayrimenkul Yönetimi\n          </h2>\n          <p className=\"text-lg text-muted-foreground mb-6\">\n            Arsa ve arazi üzerine özelleşmiş, kapsamlı CRM sistemi ile \n            gayrimenkul işlemlerinizi profesyonelce yönetin.\n          </p>\n          <div className=\"space-y-2 text-sm text-muted-foreground\">\n            <p>✓ Müşteri ve portföy yönetimi</p>\n            <p>✓ İşlem takibi ve raporlama</p>\n            <p>✓ Belge ve muhasebe sistemi</p>\n            <p>✓ Mobil uyumlu PWA desteği</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12164},"client/src/pages/clients-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, Edit, Trash2 } from \"lucide-react\";\nimport { Client, insertClientSchema } from \"@shared/schema\";\nimport { StatCard } from \"@/components/ui/stat-card\";\nimport { Users, UserCheck, Handshake, Clock } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Form schema for adding client\nconst addClientSchema = insertClientSchema.pick({\n  ad: true,\n  soyad: true,\n  email: true,\n  telefon: true,\n  tc_kimlik_no: true,\n  meslek: true,\n  adres: true,\n  notlar: true,\n}).extend({\n  email: z.string().email(\"Geçerli bir e-posta adresi giriniz\").optional().or(z.literal(\"\")),\n  telefon: z.string().optional(),\n  tc_kimlik_no: z.string().optional(),\n  meslek: z.string().optional(),\n  adres: z.string().optional(),\n  notlar: z.string().optional(),\n});\n\ntype AddClientFormData = z.infer<typeof addClientSchema>;\n\nexport default function ClientsPage() {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const { data: clients = [], isLoading } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const addClientMutation = useMutation({\n    mutationFn: async (data: AddClientFormData) => {\n      return apiRequest(\"POST\", \"/api/clients\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      setIsAddModalOpen(false);\n      addClientForm.reset();\n      toast({\n        title: \"Başarılı\",\n        description: \"Müşteri başarıyla eklendi.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Hata\",\n        description: error.message || \"Müşteri eklenirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addClientForm = useForm<AddClientFormData>({\n    resolver: zodResolver(addClientSchema),\n    defaultValues: {\n      ad: \"\",\n      soyad: \"\",\n      email: \"\",\n      telefon: \"\",\n      tc_kimlik_no: \"\",\n      meslek: \"\",\n      adres: \"\",\n      notlar: \"\",\n    },\n  });\n\n  const getStatusBadgeVariant = (durum: string) => {\n    switch (durum) {\n      case \"aktif\":\n        return \"default\";\n      case \"pasif\":\n        return \"secondary\";\n      case \"bekleyen\":\n        return \"outline\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const getStatusText = (durum: string) => {\n    switch (durum) {\n      case \"aktif\":\n        return \"Aktif\";\n      case \"pasif\":\n        return \"Pasif\";\n      case \"bekleyen\":\n        return \"Bekleyen\";\n      default:\n        return durum;\n    }\n  };\n\n  const getInitials = (ad: string, soyad: string) => {\n    return `${ad.charAt(0)}${soyad.charAt(0)}`.toUpperCase();\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return \"-\";\n    return new Date(date).toLocaleDateString('tr-TR');\n  };\n\n  // Calculate stats\n  const totalClients = clients.length;\n  const activeClients = clients.filter(c => c.durum === \"aktif\").length;\n  const pendingClients = clients.filter(c => c.durum === \"bekleyen\").length;\n  const processedClients = clients.filter(c => c.durum === \"aktif\").length; // Simplified\n\n  const columns = [\n    {\n      key: \"name\",\n      header: \"Müşteri\",\n      render: (client: Client) => (\n        <div className=\"flex items-center space-x-3\">\n          <Avatar className=\"h-10 w-10\">\n            <AvatarFallback>\n              {getInitials(client.ad, client.soyad)}\n            </AvatarFallback>\n          </Avatar>\n          <div>\n            <p className=\"text-sm font-medium text-foreground\">\n              {client.ad} {client.soyad}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">{client.meslek || \"Meslek belirtilmemiş\"}</p>\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: \"contact\",\n      header: \"İletişim\",\n      render: (client: Client) => (\n        <div>\n          <p className=\"text-sm\">{client.telefon || \"-\"}</p>\n          <p className=\"text-sm text-muted-foreground\">{client.email || \"-\"}</p>\n        </div>\n      ),\n    },\n    {\n      key: \"tc_kimlik_no\",\n      header: \"TC/Vergi No\",\n      render: (client: Client) => (\n        <span className=\"text-sm\">{client.tc_kimlik_no || client.vergi_no || \"-\"}</span>\n      ),\n    },\n    {\n      key: \"olusturulma_tarihi\",\n      header: \"Kayıt Tarihi\",\n      render: (client: Client) => (\n        <span className=\"text-sm\">{formatDate(client.olusturulma_tarihi)}</span>\n      ),\n    },\n    {\n      key: \"durum\",\n      header: \"Durum\",\n      render: (client: Client) => (\n        <Badge variant={getStatusBadgeVariant(client.durum || \"\")}>\n          {getStatusText(client.durum || \"\")}\n        </Badge>\n      ),\n    },\n    {\n      key: \"actions\",\n      header: \"İşlemler\",\n      render: (client: Client) => (\n        <div className=\"flex items-center space-x-2\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            data-testid={`view-client-${client.id}`}\n          >\n            <Eye className=\"h-4 w-4\" />\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            data-testid={`edit-client-${client.id}`}\n          >\n            <Edit className=\"h-4 w-4\" />\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            data-testid={`delete-client-${client.id}`}\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  const handleAddClient = () => {\n    setIsAddModalOpen(true);\n  };\n\n  const onAddClientSubmit = (data: AddClientFormData) => {\n    addClientMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-semibold text-foreground\">Müşteriler</h1>\n        <p className=\"text-muted-foreground\">\n          Müşteri portföyünüzü yönetin ve takip edin\n        </p>\n      </div>\n\n      {/* Client Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <StatCard\n          title=\"Toplam Müşteri\"\n          value={totalClients}\n          icon={Users}\n          iconBgColor=\"bg-primary/10\"\n        />\n        \n        <StatCard\n          title=\"Aktif Müşteri\"\n          value={activeClients}\n          icon={UserCheck}\n          iconBgColor=\"bg-accent/10\"\n        />\n        \n        <StatCard\n          title=\"İşlem Yapan\"\n          value={processedClients}\n          icon={Handshake}\n          iconBgColor=\"bg-secondary/10\"\n        />\n        \n        <StatCard\n          title=\"Bekleyen\"\n          value={pendingClients}\n          icon={Clock}\n          iconBgColor=\"bg-yellow-100\"\n        />\n      </div>\n\n      <DataTable\n        data={clients}\n        columns={columns}\n        searchPlaceholder=\"Müşteri ara...\"\n        onAdd={handleAddClient}\n        addButtonText=\"Müşteri Ekle\"\n        isLoading={isLoading}\n      />\n\n      {/* Add Client Modal */}\n      <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <DialogTitle>Yeni Müşteri Ekle</DialogTitle>\n            <DialogDescription>\n              Yeni müşteri bilgilerini girin. Gerekli alanları doldurun.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Form {...addClientForm}>\n            <form onSubmit={addClientForm.handleSubmit(onAddClientSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={addClientForm.control}\n                  name=\"ad\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Ad *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Müşteri adı\" {...field} data-testid=\"client-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={addClientForm.control}\n                  name=\"soyad\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Soyad *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Müşteri soyadı\" {...field} data-testid=\"client-surname\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={addClientForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>E-posta</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"ornek@email.com\" {...field} data-testid=\"client-email\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={addClientForm.control}\n                  name=\"telefon\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Telefon</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"+90 555 123 45 67\" {...field} data-testid=\"client-phone\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={addClientForm.control}\n                  name=\"tc_kimlik_no\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>TC Kimlik No</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"12345678901\" {...field} data-testid=\"client-tc\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={addClientForm.control}\n                  name=\"meslek\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Meslek</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Müşteri mesleği\" {...field} data-testid=\"client-profession\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={addClientForm.control}\n                name=\"adres\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Adres</FormLabel>\n                    <FormControl>\n                      <Textarea placeholder=\"Müşteri adresi\" {...field} data-testid=\"client-address\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={addClientForm.control}\n                name=\"notlar\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notlar</FormLabel>\n                    <FormControl>\n                      <Textarea placeholder=\"Ek notlar...\" {...field} data-testid=\"client-notes\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsAddModalOpen(false)}\n                  data-testid=\"cancel-button\"\n                >\n                  İptal\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={addClientMutation.isPending}\n                  data-testid=\"save-client-button\"\n                >\n                  {addClientMutation.isPending ? \"Kaydediliyor...\" : \"Müşteri Ekle\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":13474},"client/src/pages/dashboard-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { StatCard } from \"@/components/ui/stat-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { RevenueChart } from \"@/components/charts/revenue-chart\";\nimport { TransactionsChart } from \"@/components/charts/transactions-chart\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { TrendingUp, Users, MapPin, Handshake, Building } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface DashboardStats {\n  totalRevenue: string;\n  totalTransactions: number;\n  totalClients: number;\n  totalProperties: number;\n}\n\nexport default function DashboardPage() {\n  const { user } = useAuth();\n\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const formatCurrency = (value: string) => {\n    const num = parseFloat(value);\n    return `₺${num.toLocaleString('tr-TR')}`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Card key={i} className=\"border\">\n              <CardContent className=\"p-6\">\n                <div className=\"animate-pulse\">\n                  <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                  <div className=\"h-8 bg-muted rounded mb-2\"></div>\n                  <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-8\">\n      {/* Welcome Message */}\n      <div>\n        <h1 className=\"text-3xl font-bold text-foreground\">\n          Hoş geldiniz, {user?.ad} {user?.soyad}\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">\n          İşte gayrimenkul portföyünüzün güncel durumu\n        </p>\n      </div>\n\n      {/* KPI Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <StatCard\n          title=\"Toplam Ciro\"\n          value={stats ? formatCurrency(stats.totalRevenue) : \"₺0\"}\n          change=\"+12.5%\"\n          changeType=\"positive\"\n          icon={TrendingUp}\n          iconBgColor=\"bg-accent/10\"\n        />\n        \n        <StatCard\n          title=\"İşlem Sayısı\"\n          value={stats?.totalTransactions || 0}\n          change=\"+8.2%\"\n          changeType=\"positive\"\n          icon={Handshake}\n          iconBgColor=\"bg-primary/10\"\n        />\n        \n        <StatCard\n          title=\"Müşteri Sayısı\"\n          value={stats?.totalClients || 0}\n          change=\"+15.3%\"\n          changeType=\"positive\"\n          icon={Users}\n          iconBgColor=\"bg-secondary/10\"\n        />\n        \n        <StatCard\n          title=\"Portföy Sayısı\"\n          value={stats?.totalProperties || 0}\n          change=\"-2.1%\"\n          changeType=\"negative\"\n          icon={MapPin}\n          iconBgColor=\"bg-yellow-100\"\n        />\n      </div>\n\n      {/* Charts Row */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"border\">\n          <CardHeader>\n            <CardTitle>Aylık Ciro Trendi</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-80\">\n              <RevenueChart />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border\">\n          <CardHeader>\n            <CardTitle>İşlem Dağılımı</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-80\">\n              <TransactionsChart />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activities & Performance */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Recent Activities */}\n        <Card className=\"border\">\n          <CardHeader>\n            <CardTitle>Son Aktiviteler</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center space-x-4 p-3 hover:bg-muted rounded-lg\">\n              <div className=\"h-10 w-10 bg-accent/10 rounded-lg flex items-center justify-center\">\n                <Handshake className=\"h-5 w-5 text-accent\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-foreground\">Yeni işlem eklendi</p>\n                <p className=\"text-xs text-muted-foreground\">Bahçelievler Arsa Satışı - ₺450.000</p>\n              </div>\n              <span className=\"text-xs text-muted-foreground\">2 dk önce</span>\n            </div>\n\n            <div className=\"flex items-center space-x-4 p-3 hover:bg-muted rounded-lg\">\n              <div className=\"h-10 w-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <Users className=\"h-5 w-5 text-primary\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-foreground\">Yeni müşteri kaydı</p>\n                <p className=\"text-xs text-muted-foreground\">Mehmet Öztürk - Yatırımcı</p>\n              </div>\n              <span className=\"text-xs text-muted-foreground\">15 dk önce</span>\n            </div>\n\n            <div className=\"flex items-center space-x-4 p-3 hover:bg-muted rounded-lg\">\n              <div className=\"h-10 w-10 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                <Building className=\"h-5 w-5 text-secondary\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-foreground\">Emlak güncellendi</p>\n                <p className=\"text-xs text-muted-foreground\">Kadıköy Arsa - Fiyat güncellendi</p>\n              </div>\n              <span className=\"text-xs text-muted-foreground\">1 saat önce</span>\n            </div>\n\n            <Button variant=\"ghost\" className=\"w-full mt-4\" data-testid=\"view-all-activities\">\n              Tüm aktiviteleri görüntüle\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Top Performers (Admin only) */}\n        {user?.rol === \"admin\" && (\n          <Card className=\"border\">\n            <CardHeader>\n              <CardTitle>En Performanslı Danışmanlar</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-3 hover:bg-muted rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarFallback className=\"bg-accent text-accent-foreground\">AS</AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <p className=\"text-sm font-medium text-foreground\">Ahmet Sönmez</p>\n                    <p className=\"text-xs text-muted-foreground\">12 işlem</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-semibold text-foreground\">₺850.000</p>\n                  <p className=\"text-xs text-accent\">+₺45.000</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between p-3 hover:bg-muted rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarFallback className=\"bg-primary text-primary-foreground\">FY</AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <p className=\"text-sm font-medium text-foreground\">Fatma Yılmaz</p>\n                    <p className=\"text-xs text-muted-foreground\">8 işlem</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-semibold text-foreground\">₺620.000</p>\n                  <p className=\"text-xs text-accent\">+₺28.000</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between p-3 hover:bg-muted rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarFallback className=\"bg-secondary text-secondary-foreground\">MK</AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <p className=\"text-sm font-medium text-foreground\">Murat Kaya</p>\n                    <p className=\"text-xs text-muted-foreground\">6 işlem</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-semibold text-foreground\">₺480.000</p>\n                  <p className=\"text-xs text-accent\">+₺22.000</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":9029},"client/src/pages/documents-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Eye, Download, Edit, Trash2, FileText, Upload, FolderOpen } from \"lucide-react\";\nimport { Document } from \"@shared/schema\";\nimport { StatCard } from \"@/components/ui/stat-card\";\n\nexport default function DocumentsPage() {\n  const { data: documents = [], isLoading } = useQuery<Document[]>({\n    queryKey: [\"/api/documents\"],\n  });\n\n  const getStatusBadgeVariant = (durum: string) => {\n    switch (durum) {\n      case \"aktif\":\n        return \"default\";\n      case \"pasif\":\n        return \"secondary\";\n      case \"arsivlendi\":\n        return \"outline\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const getStatusText = (durum: string) => {\n    switch (durum) {\n      case \"aktif\":\n        return \"Aktif\";\n      case \"pasif\":\n        return \"Pasif\";\n      case \"arsivlendi\":\n        return \"Arşivlendi\";\n      default:\n        return durum || \"Bilinmiyor\";\n    }\n  };\n\n  const getDocumentTypeIcon = (belge_turu: string) => {\n    const iconMap: Record<string, any> = {\n      \"tapu\": FileText,\n      \"sozlesme\": FileText,\n      \"vekalet\": FileText,\n      \"kimlik\": FileText,\n      \"default\": FileText,\n    };\n    return iconMap[belge_turu] || iconMap.default;\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return \"-\";\n    return new Date(date).toLocaleDateString('tr-TR');\n  };\n\n  const formatFileSize = (bytes: number | null) => {\n    if (!bytes) return \"-\";\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return `${(bytes / Math.pow(1024, i)).toFixed(1)} ${sizes[i]}`;\n  };\n\n  // Calculate stats\n  const totalDocuments = documents.length;\n  const activeDocuments = documents.filter(d => d.durum === \"aktif\").length;\n  const publicDocuments = documents.filter(d => d.gizlilik === \"public\").length;\n\n  const columns = [\n    {\n      key: \"belge_info\",\n      header: \"Belge Bilgisi\",\n      render: (document: Document) => {\n        const IconComponent = getDocumentTypeIcon(document.belge_turu);\n        return (\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"h-10 w-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n              <IconComponent className=\"h-5 w-5 text-primary\" />\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-foreground\">\n                {document.belge_turu || \"Belirtilmemiş\"}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                {document.belge_id || document.id.slice(0, 8)}\n              </p>\n            </div>\n          </div>\n        );\n      },\n    },\n    {\n      key: \"dosya_info\",\n      header: \"Dosya\",\n      render: (document: Document) => (\n        <div>\n          <p className=\"text-sm font-medium\">{document.dosya_turu || \"Bilinmiyor\"}</p>\n          <p className=\"text-xs text-muted-foreground\">\n            {formatFileSize(document.dosya_boyutu)}\n          </p>\n        </div>\n      ),\n    },\n    {\n      key: \"yuklenme_tarihi\",\n      header: \"Yüklenme Tarihi\",\n      render: (document: Document) => (\n        <span className=\"text-sm\">{formatDate(document.yuklenme_tarihi)}</span>\n      ),\n    },\n    {\n      key: \"gizlilik\",\n      header: \"Gizlilik\",\n      render: (document: Document) => (\n        <Badge variant={document.gizlilik === \"public\" ? \"default\" : \"secondary\"}>\n          {document.gizlilik === \"public\" ? \"Açık\" : \"Gizli\"}\n        </Badge>\n      ),\n    },\n    {\n      key: \"durum\",\n      header: \"Durum\",\n      render: (document: Document) => (\n        <Badge variant={getStatusBadgeVariant(document.durum || \"\")}>\n          {getStatusText(document.durum || \"\")}\n        </Badge>\n      ),\n    },\n    {\n      key: \"actions\",\n      header: \"İşlemler\",\n      render: (document: Document) => (\n        <div className=\"flex items-center space-x-2\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            data-testid={`view-document-${document.id}`}\n          >\n            <Eye className=\"h-4 w-4\" />\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            data-testid={`download-document-${document.id}`}\n          >\n            <Download className=\"h-4 w-4\" />\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            data-testid={`edit-document-${document.id}`}\n          >\n            <Edit className=\"h-4 w-4\" />\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            data-testid={`delete-document-${document.id}`}\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  const handleAddDocument = () => {\n    // TODO: Implement add document modal\n    console.log(\"Add document modal\");\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-semibold text-foreground\">Belgeler</h1>\n        <p className=\"text-muted-foreground\">\n          Gayrimenkul belgelerinizi yönetin ve organize edin\n        </p>\n      </div>\n\n      {/* Document Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <StatCard\n          title=\"Toplam Belge\"\n          value={totalDocuments}\n          icon={FileText}\n          iconBgColor=\"bg-primary/10\"\n        />\n        \n        <StatCard\n          title=\"Aktif Belgeler\"\n          value={activeDocuments}\n          icon={FolderOpen}\n          iconBgColor=\"bg-accent/10\"\n        />\n        \n        <StatCard\n          title=\"Açık Belgeler\"\n          value={publicDocuments}\n          icon={Upload}\n          iconBgColor=\"bg-secondary/10\"\n        />\n      </div>\n\n      <DataTable\n        data={documents}\n        columns={columns}\n        searchPlaceholder=\"Belge ara...\"\n        onAdd={handleAddDocument}\n        addButtonText=\"Belge Yükle\"\n        isLoading={isLoading}\n      />\n    </div>\n  );\n}\n","size_bytes":6115},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/properties-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, Edit, Trash2 } from \"lucide-react\";\nimport { Property, Client, insertPropertySchema } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Form schema for adding property\nconst addPropertySchema = insertPropertySchema.pick({\n  il: true,\n  ilce: true,\n  mahalle: true,\n  ada_no: true,\n  parsel_no: true,\n  alan_m2: true,\n  tur: true,\n  imar_plani_turu: true,\n  taks: true,\n  kaks: true,\n  maksimum_yukseklik: true,\n  malik_id: true,\n  alis_fiyati: true,\n  ilan_fiyati: true,\n  degerleme_fiyati: true,\n  koordinatlar: true,\n  notlar: true,\n  durum: true,\n  tapu_durumu: true,\n}).extend({\n  il: z.string().min(1, \"İl zorunludur\"),\n  ilce: z.string().min(1, \"İlçe zorunludur\"),\n  mahalle: z.string().optional(),\n  ada_no: z.string().optional(),\n  parsel_no: z.string().optional(),\n  alan_m2: z.string().optional(),\n  tur: z.string().optional(),\n  imar_plani_turu: z.string().optional(),\n  taks: z.string().optional(),\n  kaks: z.string().optional(),\n  maksimum_yukseklik: z.string().optional(),\n  malik_id: z.string().optional(),\n  alis_fiyati: z.string().optional(),\n  ilan_fiyati: z.string().optional(),\n  degerleme_fiyati: z.string().optional(),\n  notlar: z.string().optional(),\n  durum: z.string().optional(),\n  tapu_durumu: z.string().optional(),\n});\n\ntype AddPropertyFormData = z.infer<typeof addPropertySchema>;\n\nexport default function PropertiesPage() {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const { data: properties = [], isLoading } = useQuery<Property[]>({\n    queryKey: [\"/api/properties\"],\n  });\n\n  const { data: clients = [] } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const addPropertyMutation = useMutation({\n    mutationFn: async (data: AddPropertyFormData) => {\n      return apiRequest(\"POST\", \"/api/properties\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/properties\"] });\n      setIsAddModalOpen(false);\n      addPropertyForm.reset();\n      toast({\n        title: \"Başarılı\",\n        description: \"Gayrimenkul başarıyla eklendi.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Hata\",\n        description: error.message || \"Gayrimenkul eklenirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addPropertyForm = useForm<AddPropertyFormData>({\n    resolver: zodResolver(addPropertySchema),\n    defaultValues: {\n      il: \"\",\n      ilce: \"\",\n      mahalle: \"\",\n      ada_no: \"\",\n      parsel_no: \"\",\n      alan_m2: \"\",\n      tur: \"arsa\",\n      imar_plani_turu: \"\",\n      taks: \"\",\n      kaks: \"\",\n      maksimum_yukseklik: \"\",\n      malik_id: \"\",\n      alis_fiyati: \"\",\n      ilan_fiyati: \"\",\n      degerleme_fiyati: \"\",\n      notlar: \"\",\n      durum: \"aktif\",\n      tapu_durumu: \"\",\n    },\n  });\n\n  const getStatusBadgeVariant = (durum: string) => {\n    switch (durum) {\n      case \"aktif\":\n        return \"default\";\n      case \"satildi\":\n        return \"secondary\";\n      case \"beklemede\":\n        return \"outline\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const getStatusText = (durum: string) => {\n    switch (durum) {\n      case \"aktif\":\n        return \"Aktif\";\n      case \"satildi\":\n        return \"Satıldı\";\n      case \"beklemede\":\n        return \"Beklemede\";\n      default:\n        return durum;\n    }\n  };\n\n  const formatCurrency = (value: string | null) => {\n    if (!value) return \"-\";\n    const num = parseFloat(value);\n    return `₺${num.toLocaleString('tr-TR')}`;\n  };\n\n  const formatArea = (value: string | null) => {\n    if (!value) return \"-\";\n    return `${value} m²`;\n  };\n\n  const columns = [\n    {\n      key: \"gayrimenkul_id\",\n      header: \"ID\",\n      render: (property: Property) => (\n        <span className=\"font-medium\">{property.gayrimenkul_id || property.id.slice(0, 8)}</span>\n      ),\n    },\n    {\n      key: \"location\",\n      header: \"Konum\",\n      render: (property: Property) => (\n        <div>\n          <p className=\"font-medium\">{property.mahalle || \"Belirtilmemiş\"}</p>\n          <p className=\"text-muted-foreground text-sm\">{property.il}/{property.ilce}</p>\n        </div>\n      ),\n    },\n    {\n      key: \"ada_parsel\",\n      header: \"Ada/Parsel\",\n      render: (property: Property) => (\n        <span>{property.ada_no && property.parsel_no ? `${property.ada_no}/${property.parsel_no}` : \"-\"}</span>\n      ),\n    },\n    {\n      key: \"alan_m2\",\n      header: \"Alan\",\n      render: (property: Property) => formatArea(property.alan_m2),\n    },\n    {\n      key: \"ilan_fiyati\",\n      header: \"İlan Fiyatı\",\n      render: (property: Property) => (\n        <span className=\"font-semibold\">{formatCurrency(property.ilan_fiyati)}</span>\n      ),\n    },\n    {\n      key: \"tur\",\n      header: \"Tür\",\n      render: (property: Property) => (\n        <span className=\"capitalize\">{property.tur || \"Belirtilmemiş\"}</span>\n      ),\n    },\n    {\n      key: \"durum\",\n      header: \"Durum\",\n      render: (property: Property) => (\n        <Badge variant={getStatusBadgeVariant(property.durum || \"\")}>\n          {getStatusText(property.durum || \"\")}\n        </Badge>\n      ),\n    },\n    {\n      key: \"actions\",\n      header: \"İşlemler\",\n      render: (property: Property) => (\n        <div className=\"flex items-center space-x-2\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            data-testid={`view-property-${property.id}`}\n          >\n            <Eye className=\"h-4 w-4\" />\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            data-testid={`edit-property-${property.id}`}\n          >\n            <Edit className=\"h-4 w-4\" />\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            data-testid={`delete-property-${property.id}`}\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  const handleAddProperty = () => {\n    setIsAddModalOpen(true);\n  };\n\n  const onAddPropertySubmit = (data: AddPropertyFormData) => {\n    addPropertyMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-semibold text-foreground\">Gayrimenkuller</h1>\n        <p className=\"text-muted-foreground\">\n          Portföyünüzdeki gayrimenkulleri yönetin\n        </p>\n      </div>\n\n      <DataTable\n        data={properties}\n        columns={columns}\n        searchPlaceholder=\"Gayrimenkul ara...\"\n        onAdd={handleAddProperty}\n        addButtonText=\"Gayrimenkul Ekle\"\n        isLoading={isLoading}\n      />\n\n      {/* Add Property Modal */}\n      <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>\n        <DialogContent className=\"sm:max-w-[800px] max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Yeni Gayrimenkul Ekle</DialogTitle>\n            <DialogDescription>\n              Yeni gayrimenkul bilgilerini girin. Gerekli alanları doldurun.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Form {...addPropertyForm}>\n            <form onSubmit={addPropertyForm.handleSubmit(onAddPropertySubmit)} className=\"space-y-6\">\n              {/* Location Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Konum Bilgileri</h3>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={addPropertyForm.control}\n                    name=\"il\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>İl *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"İl\" {...field} data-testid=\"property-il\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={addPropertyForm.control}\n                    name=\"ilce\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>İlçe *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"İlçe\" {...field} data-testid=\"property-ilce\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={addPropertyForm.control}\n                    name=\"mahalle\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Mahalle</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Mahalle\" {...field} data-testid=\"property-mahalle\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={addPropertyForm.control}\n                    name=\"ada_no\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Ada No</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Ada numarası\" {...field} data-testid=\"property-ada-no\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={addPropertyForm.control}\n                    name=\"parsel_no\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Parsel No</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Parsel numarası\" {...field} data-testid=\"property-parsel-no\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Property Details */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Gayrimenkul Detayları</h3>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={addPropertyForm.control}\n                    name=\"tur\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Tür</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"property-type\">\n                              <SelectValue placeholder=\"Gayrimenkul türünü seçin\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"arsa\">Arsa</SelectItem>\n                            <SelectItem value=\"arazi\">Arazi</SelectItem>\n                            <SelectItem value=\"bina\">Bina</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={addPropertyForm.control}\n                    name=\"alan_m2\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Alan (m²)</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} data-testid=\"property-area\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={addPropertyForm.control}\n                    name=\"durum\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Durum</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"property-status\">\n                              <SelectValue placeholder=\"Durumu seçin\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"aktif\">Aktif</SelectItem>\n                            <SelectItem value=\"beklemede\">Beklemede</SelectItem>\n                            <SelectItem value=\"satildi\">Satıldı</SelectItem>\n                            <SelectItem value=\"iptal\">İptal</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={addPropertyForm.control}\n                    name=\"malik_id\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Malik (Sahibi)</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"property-owner\">\n                              <SelectValue placeholder=\"Malik seçin\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {clients.map((client) => (\n                              <SelectItem key={client.id} value={client.id}>\n                                {client.ad} {client.soyad}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Technical Details */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Teknik Bilgiler</h3>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={addPropertyForm.control}\n                    name=\"taks\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>TAKS</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} data-testid=\"property-taks\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={addPropertyForm.control}\n                    name=\"kaks\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>KAKS</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} data-testid=\"property-kaks\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={addPropertyForm.control}\n                    name=\"maksimum_yukseklik\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Maksimum Yükseklik (m)</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} data-testid=\"property-max-height\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={addPropertyForm.control}\n                    name=\"imar_plani_turu\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>İmar Planı Türü</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"İmar planı türü\" {...field} data-testid=\"property-zoning\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={addPropertyForm.control}\n                    name=\"tapu_durumu\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Tapu Durumu</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Tapu durumu\" {...field} data-testid=\"property-deed-status\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Pricing Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Fiyat Bilgileri</h3>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={addPropertyForm.control}\n                    name=\"alis_fiyati\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Alış Fiyatı (₺)</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} data-testid=\"property-purchase-price\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={addPropertyForm.control}\n                    name=\"ilan_fiyati\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>İlan Fiyatı (₺)</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} data-testid=\"property-listing-price\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={addPropertyForm.control}\n                    name=\"degerleme_fiyati\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Değerleme Fiyatı (₺)</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} data-testid=\"property-valuation-price\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Notes */}\n              <FormField\n                control={addPropertyForm.control}\n                name=\"notlar\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notlar</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Gayrimenkul hakkında notlar...\"\n                        {...field} \n                        data-testid=\"property-notes\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsAddModalOpen(false)}\n                  data-testid=\"property-cancel\"\n                >\n                  İptal\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={addPropertyMutation.isPending}\n                  data-testid=\"property-submit\"\n                >\n                  {addPropertyMutation.isPending ? \"Ekleniyor...\" : \"Gayrimenkul Ekle\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":22291},"client/src/pages/reports-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport { \n  Eye, \n  Download, \n  BarChart3, \n  PieChart, \n  TrendingUp, \n  FileBarChart,\n  Calendar,\n  Filter\n} from \"lucide-react\";\nimport { Report } from \"@shared/schema\";\nimport { StatCard } from \"@/components/ui/stat-card\";\nimport { RevenueChart } from \"@/components/charts/revenue-chart\";\nimport { TransactionsChart } from \"@/components/charts/transactions-chart\";\n\nexport default function ReportsPage() {\n  const { data: reports = [], isLoading } = useQuery<Report[]>({\n    queryKey: [\"/api/reports\"],\n  });\n\n  const getReportTypeIcon = (rapor_turu: string) => {\n    const iconMap: Record<string, any> = {\n      \"ciro\": TrendingUp,\n      \"islem\": BarChart3,\n      \"fatura\": FileBarChart,\n      \"musteri_sayisi\": PieChart,\n      \"portfoy_sayisi\": BarChart3,\n      \"yatirimci_raporu\": TrendingUp,\n      \"default\": FileBarChart,\n    };\n    return iconMap[rapor_turu] || iconMap.default;\n  };\n\n  const getReportTypeName = (rapor_turu: string) => {\n    const nameMap: Record<string, string> = {\n      \"ciro\": \"Ciro Raporu\",\n      \"islem\": \"İşlem Raporu\", \n      \"fatura\": \"Fatura Raporu\",\n      \"musteri_sayisi\": \"Müşteri Sayısı\",\n      \"portfoy_sayisi\": \"Portföy Raporu\",\n      \"yatirimci_raporu\": \"Yatırımcı Raporu\",\n    };\n    return nameMap[rapor_turu] || rapor_turu;\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return \"-\";\n    return new Date(date).toLocaleDateString('tr-TR');\n  };\n\n  // Calculate stats\n  const totalReports = reports.length;\n  const monthlyReports = reports.filter(r => {\n    if (!r.olusturulma_tarihi) return false;\n    const reportDate = new Date(r.olusturulma_tarihi);\n    const now = new Date();\n    return reportDate.getMonth() === now.getMonth() && \n           reportDate.getFullYear() === now.getFullYear();\n  }).length;\n\n  const revenueReports = reports.filter(r => r.rapor_turu === \"ciro\").length;\n\n  const columns = [\n    {\n      key: \"report_info\",\n      header: \"Rapor Bilgisi\",\n      render: (report: Report) => {\n        const IconComponent = getReportTypeIcon(report.rapor_turu);\n        return (\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"h-10 w-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n              <IconComponent className=\"h-5 w-5 text-primary\" />\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-foreground\">\n                {report.baslik}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                {getReportTypeName(report.rapor_turu)}\n              </p>\n            </div>\n          </div>\n        );\n      },\n    },\n    {\n      key: \"tarih_araligi\",\n      header: \"Tarih Aralığı\",\n      render: (report: Report) => (\n        <div className=\"text-sm\">\n          <p>{formatDate(report.tarih_baslangic)}</p>\n          <p className=\"text-muted-foreground\">\n            {formatDate(report.tarih_bitis)}\n          </p>\n        </div>\n      ),\n    },\n    {\n      key: \"olusturulma_tarihi\",\n      header: \"Oluşturulma\",\n      render: (report: Report) => (\n        <span className=\"text-sm\">{formatDate(report.olusturulma_tarihi)}</span>\n      ),\n    },\n    {\n      key: \"durum\",\n      header: \"Durum\",\n      render: (report: Report) => (\n        <Badge variant={report.durum === \"aktif\" ? \"default\" : \"secondary\"}>\n          {report.durum === \"aktif\" ? \"Aktif\" : \"Pasif\"}\n        </Badge>\n      ),\n    },\n    {\n      key: \"actions\",\n      header: \"İşlemler\",\n      render: (report: Report) => (\n        <div className=\"flex items-center space-x-2\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            data-testid={`view-report-${report.id}`}\n          >\n            <Eye className=\"h-4 w-4\" />\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            data-testid={`download-report-${report.id}`}\n          >\n            <Download className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  const handleGenerateReport = () => {\n    // TODO: Implement generate report modal\n    console.log(\"Generate report modal\");\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-semibold text-foreground\">Raporlar</h1>\n        <p className=\"text-muted-foreground\">\n          İş performansınızı analiz edin ve detaylı raporlar oluşturun\n        </p>\n      </div>\n\n      {/* Report Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <StatCard\n          title=\"Toplam Rapor\"\n          value={totalReports}\n          icon={FileBarChart}\n          iconBgColor=\"bg-primary/10\"\n        />\n        \n        <StatCard\n          title=\"Bu Ay Rapor\"\n          value={monthlyReports}\n          icon={Calendar}\n          iconBgColor=\"bg-accent/10\"\n        />\n        \n        <StatCard\n          title=\"Ciro Raporları\"\n          value={revenueReports}\n          icon={TrendingUp}\n          iconBgColor=\"bg-secondary/10\"\n        />\n      </div>\n\n      {/* Quick Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"border\">\n          <CardHeader>\n            <CardTitle>Aylık Performans</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-80\">\n              <RevenueChart />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border\">\n          <CardHeader>\n            <CardTitle>İşlem Analizi</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-80\">\n              <TransactionsChart />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Reports List */}\n      <DataTable\n        data={reports}\n        columns={columns}\n        searchPlaceholder=\"Rapor ara...\"\n        onAdd={handleGenerateReport}\n        addButtonText=\"Rapor Oluştur\"\n        isLoading={isLoading}\n      />\n\n      {/* Quick Report Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"border cursor-pointer hover:shadow-md transition-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"h-12 w-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"h-6 w-6 text-accent\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Ciro Raporu</h3>\n                <p className=\"text-sm text-muted-foreground\">Aylık ciro analizi</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border cursor-pointer hover:shadow-md transition-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"h-12 w-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <BarChart3 className=\"h-6 w-6 text-primary\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">İşlem Raporu</h3>\n                <p className=\"text-sm text-muted-foreground\">İşlem detay analizi</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border cursor-pointer hover:shadow-md transition-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"h-12 w-12 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                <PieChart className=\"h-6 w-6 text-secondary\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Müşteri Raporu</h3>\n                <p className=\"text-sm text-muted-foreground\">Müşteri analizi</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8216},"client/src/pages/transactions-page.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, FileText } from \"lucide-react\";\nimport { Transaction, Client, Property, insertTransactionSchema } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { StatCard } from \"@/components/ui/stat-card\";\nimport { Calendar, TrendingUp, Percent } from \"lucide-react\";\n\n// Form schema for adding transaction\nconst addTransactionSchema = insertTransactionSchema.pick({\n  islem_id: true,\n  gayrimenkul_id: true,\n  alici_id: true,\n  satici_id: true,\n  islem_tarihi: true,\n  tutar: true,\n  para_birimi: true,\n  durum: true,\n  odeme_yontemi: true,\n  odeme_durumu: true,\n  komisyon_orani: true,\n  komisyon_tutari: true,\n  vergi_tutari: true,\n  net_tutar: true,\n  sozlesme_id: true,\n  notlar: true,\n}).extend({\n  tutar: z.string().min(1, \"İşlem tutarı zorunludur\"),\n  gayrimenkul_id: z.string().optional(),\n  alici_id: z.string().optional(),\n  satici_id: z.string().optional(),\n  komisyon_orani: z.string().optional(),\n  komisyon_tutari: z.string().optional(),\n  vergi_tutari: z.string().optional(),\n  net_tutar: z.string().optional(),\n  islem_tarihi: z.string().optional(),\n  para_birimi: z.string().optional(),\n  durum: z.string().optional(),\n  odeme_yontemi: z.string().optional(),\n  odeme_durumu: z.string().optional(),\n  sozlesme_id: z.string().optional(),\n  notlar: z.string().optional(),\n});\n\ntype AddTransactionFormData = z.infer<typeof addTransactionSchema>;\n\nexport default function TransactionsPage() {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const { data: transactions = [], isLoading } = useQuery<Transaction[]>({\n    queryKey: [\"/api/transactions\"],\n  });\n\n  const { data: clients = [] } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const { data: properties = [] } = useQuery<Property[]>({\n    queryKey: [\"/api/properties\"],\n  });\n\n  const addTransactionMutation = useMutation({\n    mutationFn: async (data: AddTransactionFormData) => {\n      return apiRequest(\"POST\", \"/api/transactions\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/transactions\"] });\n      setIsAddModalOpen(false);\n      addTransactionForm.reset();\n      toast({\n        title: \"Başarılı\",\n        description: \"İşlem başarıyla eklendi.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Hata\",\n        description: error.message || \"İşlem eklenirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addTransactionForm = useForm<AddTransactionFormData>({\n    resolver: zodResolver(addTransactionSchema),\n    defaultValues: {\n      islem_id: \"\",\n      gayrimenkul_id: \"\",\n      alici_id: \"\",\n      satici_id: \"\",\n      tutar: \"\",\n      para_birimi: \"TRY\",\n      durum: \"beklemede\",\n      odeme_yontemi: \"\",\n      odeme_durumu: \"bekleyen\",\n      komisyon_orani: \"3\",\n      komisyon_tutari: \"\",\n      vergi_tutari: \"\",\n      net_tutar: \"\",\n      sozlesme_id: \"\",\n      notlar: \"\",\n      islem_tarihi: new Date().toISOString().split('T')[0],\n    },\n  });\n\n  // Watch for changes in tutar and komisyon_orani to calculate komisyon_tutari\n  const tutar = addTransactionForm.watch(\"tutar\");\n  const komisyonOrani = addTransactionForm.watch(\"komisyon_orani\");\n\n  // Calculate commission amount automatically\n  React.useEffect(() => {\n    if (tutar && komisyonOrani) {\n      const amount = parseFloat(tutar) || 0;\n      const rate = parseFloat(komisyonOrani) || 0;\n      const commission = (amount * rate) / 100;\n      const tax = commission * 0.18; // 18% KDV\n      const netAmount = amount - commission - tax;\n      \n      addTransactionForm.setValue(\"komisyon_tutari\", commission.toFixed(2));\n      addTransactionForm.setValue(\"vergi_tutari\", tax.toFixed(2));\n      addTransactionForm.setValue(\"net_tutar\", netAmount.toFixed(2));\n    }\n  }, [tutar, komisyonOrani, addTransactionForm]);\n\n  const getStatusBadgeVariant = (durum: string) => {\n    switch (durum) {\n      case \"tamamlandi\":\n        return \"default\";\n      case \"beklemede\":\n        return \"outline\";\n      case \"iptal\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const getStatusText = (durum: string) => {\n    switch (durum) {\n      case \"tamamlandi\":\n        return \"Tamamlandı\";\n      case \"beklemede\":\n        return \"Beklemede\";\n      case \"iptal\":\n        return \"İptal\";\n      default:\n        return durum;\n    }\n  };\n\n  const formatCurrency = (value: string | null) => {\n    if (!value) return \"-\";\n    const num = parseFloat(value);\n    return `₺${num.toLocaleString('tr-TR')}`;\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return \"-\";\n    return new Date(date).toLocaleDateString('tr-TR');\n  };\n\n  // Calculate stats\n  const thisMonthTransactions = transactions.filter(t => {\n    if (!t.islem_tarihi) return false;\n    const transactionDate = new Date(t.islem_tarihi);\n    const now = new Date();\n    return transactionDate.getMonth() === now.getMonth() && \n           transactionDate.getFullYear() === now.getFullYear();\n  });\n\n  const thisMonthRevenue = thisMonthTransactions.reduce((sum, t) => {\n    return sum + parseFloat(t.tutar || \"0\");\n  }, 0);\n\n  const averageTransaction = transactions.length > 0 \n    ? transactions.reduce((sum, t) => sum + parseFloat(t.tutar || \"0\"), 0) / transactions.length\n    : 0;\n\n  const totalCommission = transactions.reduce((sum, t) => {\n    return sum + parseFloat(t.komisyon_tutari || \"0\");\n  }, 0);\n\n  const columns = [\n    {\n      key: \"islem_id\",\n      header: \"İşlem No\",\n      render: (transaction: Transaction) => (\n        <span className=\"font-medium\">{transaction.islem_id || transaction.id.slice(0, 8)}</span>\n      ),\n    },\n    {\n      key: \"tutar\",\n      header: \"Tutar\",\n      render: (transaction: Transaction) => (\n        <span className=\"font-semibold\">{formatCurrency(transaction.tutar)}</span>\n      ),\n    },\n    {\n      key: \"komisyon_tutari\",\n      header: \"Komisyon\",\n      render: (transaction: Transaction) => (\n        <span className=\"font-semibold text-accent\">{formatCurrency(transaction.komisyon_tutari)}</span>\n      ),\n    },\n    {\n      key: \"islem_tarihi\",\n      header: \"Tarih\",\n      render: (transaction: Transaction) => (\n        <span className=\"text-sm\">{formatDate(transaction.islem_tarihi)}</span>\n      ),\n    },\n    {\n      key: \"durum\",\n      header: \"Durum\",\n      render: (transaction: Transaction) => (\n        <Badge variant={getStatusBadgeVariant(transaction.durum || \"\")}>\n          {getStatusText(transaction.durum || \"\")}\n        </Badge>\n      ),\n    },\n    {\n      key: \"actions\",\n      header: \"İşlemler\",\n      render: (transaction: Transaction) => (\n        <div className=\"flex items-center space-x-2\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            data-testid={`view-transaction-${transaction.id}`}\n          >\n            <Eye className=\"h-4 w-4\" />\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            data-testid={`download-transaction-${transaction.id}`}\n          >\n            <FileText className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  const handleAddTransaction = () => {\n    setIsAddModalOpen(true);\n  };\n\n  const onAddTransactionSubmit = (data: AddTransactionFormData) => {\n    addTransactionMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-semibold text-foreground\">İşlemler</h1>\n        <p className=\"text-muted-foreground\">\n          Gayrimenkul işlemlerinizi yönetin ve takip edin\n        </p>\n      </div>\n\n      {/* Transaction Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <StatCard\n          title=\"Bu Ay Ciro\"\n          value={`₺${thisMonthRevenue.toLocaleString('tr-TR')}`}\n          change={`${thisMonthTransactions.length} işlem`}\n          icon={Calendar}\n          iconBgColor=\"bg-accent/10\"\n        />\n        \n        <StatCard\n          title=\"Ortalama İşlem\"\n          value={`₺${averageTransaction.toLocaleString('tr-TR')}`}\n          change=\"son 30 gün\"\n          icon={TrendingUp}\n          iconBgColor=\"bg-primary/10\"\n        />\n        \n        <StatCard\n          title=\"Toplam Komisyon\"\n          value={`₺${totalCommission.toLocaleString('tr-TR')}`}\n          change=\"bu ay\"\n          icon={Percent}\n          iconBgColor=\"bg-secondary/10\"\n        />\n      </div>\n\n      <DataTable\n        data={transactions}\n        columns={columns}\n        searchPlaceholder=\"İşlem ara...\"\n        onAdd={handleAddTransaction}\n        addButtonText=\"İşlem Ekle\"\n        isLoading={isLoading}\n      />\n\n      {/* Add Transaction Modal */}\n      <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>\n        <DialogContent className=\"sm:max-w-[800px] max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Yeni İşlem Ekle</DialogTitle>\n            <DialogDescription>\n              Yeni gayrimenkul işlemi bilgilerini girin. Gerekli alanları doldurun.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Form {...addTransactionForm}>\n            <form onSubmit={addTransactionForm.handleSubmit(onAddTransactionSubmit)} className=\"space-y-6\">\n              {/* Basic Transaction Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">İşlem Bilgileri</h3>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={addTransactionForm.control}\n                    name=\"islem_id\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>İşlem Numarası</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"İşlem numarası\" {...field} value={field.value || \"\"} data-testid=\"transaction-islem-id\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={addTransactionForm.control}\n                    name=\"islem_tarihi\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>İşlem Tarihi</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} data-testid=\"transaction-date\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Property and Clients */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Gayrimenkul ve Taraflar</h3>\n                <div className=\"grid grid-cols-1 gap-4\">\n                  <FormField\n                    control={addTransactionForm.control}\n                    name=\"gayrimenkul_id\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Gayrimenkul</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value} data-testid=\"transaction-property\">\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Gayrimenkul seçin\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {properties.map((property) => (\n                              <SelectItem key={property.id} value={property.id}>\n                                {property.mahalle || \"Belirsiz\"} - {property.il}/{property.ilce}\n                                {property.ilan_fiyati && ` (₺${parseFloat(property.ilan_fiyati).toLocaleString('tr-TR')})`}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={addTransactionForm.control}\n                      name=\"alici_id\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Alıcı</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value} data-testid=\"transaction-buyer\">\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Alıcı seçin\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {clients.map((client) => (\n                                <SelectItem key={client.id} value={client.id}>\n                                  {client.ad} {client.soyad}\n                                  {client.telefon && ` (${client.telefon})`}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={addTransactionForm.control}\n                      name=\"satici_id\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Satıcı</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value} data-testid=\"transaction-seller\">\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Satıcı seçin\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {clients.map((client) => (\n                                <SelectItem key={client.id} value={client.id}>\n                                  {client.ad} {client.soyad}\n                                  {client.telefon && ` (${client.telefon})`}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Financial Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Mali Bilgiler</h3>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={addTransactionForm.control}\n                    name=\"tutar\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>İşlem Tutarı (₺) *</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\" \n                            placeholder=\"0.00\" \n                            {...field} \n                            data-testid=\"transaction-amount\" \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={addTransactionForm.control}\n                    name=\"komisyon_orani\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Komisyon Oranı (%)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\" \n                            placeholder=\"3.00\" \n                            {...field} \n                            data-testid=\"transaction-commission-rate\" \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={addTransactionForm.control}\n                    name=\"komisyon_tutari\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Komisyon Tutarı (₺)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\" \n                            {...field} \n                            readOnly \n                            className=\"bg-muted\" \n                            data-testid=\"transaction-commission-amount\" \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={addTransactionForm.control}\n                    name=\"vergi_tutari\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Vergi Tutarı (₺)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\" \n                            {...field} \n                            readOnly \n                            className=\"bg-muted\" \n                            data-testid=\"transaction-tax-amount\" \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <FormField\n                  control={addTransactionForm.control}\n                  name=\"net_tutar\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Net Tutar (₺)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\" \n                          {...field} \n                          readOnly \n                          className=\"bg-muted font-semibold\" \n                          data-testid=\"transaction-net-amount\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* Status and Payment Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Durum ve Ödeme Bilgileri</h3>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={addTransactionForm.control}\n                    name=\"durum\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>İşlem Durumu</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value} data-testid=\"transaction-status\">\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Durum seçin\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"beklemede\">Beklemede</SelectItem>\n                            <SelectItem value=\"tamamlandi\">Tamamlandı</SelectItem>\n                            <SelectItem value=\"iptal\">İptal</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={addTransactionForm.control}\n                    name=\"odeme_durumu\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Ödeme Durumu</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value} data-testid=\"transaction-payment-status\">\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Ödeme durumu seçin\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"bekleyen\">Bekleyen</SelectItem>\n                            <SelectItem value=\"kismen_odendi\">Kısmen Ödendi</SelectItem>\n                            <SelectItem value=\"tamamen_odendi\">Tamamen Ödendi</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={addTransactionForm.control}\n                    name=\"odeme_yontemi\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Ödeme Yöntemi</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value} data-testid=\"transaction-payment-method\">\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Ödeme yöntemi seçin\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"nakit\">Nakit</SelectItem>\n                            <SelectItem value=\"havale\">Havale/EFT</SelectItem>\n                            <SelectItem value=\"cek\">Çek</SelectItem>\n                            <SelectItem value=\"kredi\">Kredi</SelectItem>\n                            <SelectItem value=\"diger\">Diğer</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={addTransactionForm.control}\n                    name=\"sozlesme_id\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Sözleşme Numarası</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Sözleşme numarası\" {...field} data-testid=\"transaction-contract-id\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Notes */}\n              <FormField\n                control={addTransactionForm.control}\n                name=\"notlar\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notlar</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"İşlemle ilgili ek notlar...\" \n                        className=\"resize-none\" \n                        {...field} \n                        data-testid=\"transaction-notes\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Submit Buttons */}\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsAddModalOpen(false)}\n                  data-testid=\"transaction-cancel\"\n                >\n                  İptal\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={addTransactionMutation.isPending}\n                  data-testid=\"transaction-submit\"\n                >\n                  {addTransactionMutation.isPending ? \"Ekleniyor...\" : \"İşlem Ekle\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":26065},"client/src/pages/users-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, Edit, UserCog, Users, Shield } from \"lucide-react\";\nimport { User, insertUserSchema } from \"@shared/schema\";\nimport { StatCard } from \"@/components/ui/stat-card\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Form schema for adding user\nconst addUserSchema = insertUserSchema.pick({\n  ad: true,\n  soyad: true,\n  email: true,\n  username: true,\n  telefon: true,\n  rol: true,\n  departman: true,\n  password: true,\n  notlar: true,\n}).extend({\n  email: z.string().email(\"Geçerli bir e-posta adresi giriniz\"),\n  username: z.string().min(3, \"Kullanıcı adı en az 3 karakter olmalıdır\"),\n  password: z.string().min(6, \"Şifre en az 6 karakter olmalıdır\"),\n  telefon: z.string().optional(),\n  departman: z.string().optional(),\n  notlar: z.string().optional(),\n});\n\ntype AddUserFormData = z.infer<typeof addUserSchema>;\n\nexport default function UsersPage() {\n  const { user: currentUser } = useAuth();\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Only admins can access this page\n  if (currentUser?.rol !== \"admin\") {\n    return (\n      <div className=\"p-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <Shield className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h2 className=\"text-xl font-semibold mb-2\">Erişim Engellendi</h2>\n              <p className=\"text-muted-foreground\">\n                Bu sayfaya erişim için admin yetkisi gerekiyor.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const { data: users = [], isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const addUserMutation = useMutation({\n    mutationFn: async (data: AddUserFormData) => {\n      return apiRequest(\"POST\", \"/api/users\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setIsAddModalOpen(false);\n      addUserForm.reset();\n      toast({\n        title: \"Başarılı\",\n        description: \"Kullanıcı başarıyla eklendi.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Hata\",\n        description: error.message || \"Kullanıcı eklenirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addUserForm = useForm<AddUserFormData>({\n    resolver: zodResolver(addUserSchema),\n    defaultValues: {\n      ad: \"\",\n      soyad: \"\",\n      email: \"\",\n      username: \"\",\n      telefon: \"\",\n      rol: \"consultant\",\n      departman: \"\",\n      password: \"\",\n      notlar: \"\",\n    },\n  });\n\n  const getRoleBadgeVariant = (rol: string) => {\n    switch (rol) {\n      case \"admin\":\n        return \"destructive\";\n      case \"consultant\":\n        return \"default\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const getRoleText = (rol: string) => {\n    switch (rol) {\n      case \"admin\":\n        return \"Admin\";\n      case \"consultant\":\n        return \"Danışman\";\n      default:\n        return rol;\n    }\n  };\n\n  const getInitials = (ad: string, soyad: string) => {\n    return `${ad.charAt(0)}${soyad.charAt(0)}`.toUpperCase();\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return \"Hiç giriş yapmamış\";\n    return new Date(date).toLocaleString('tr-TR');\n  };\n\n  // Calculate stats\n  const totalUsers = users.length;\n  const consultants = users.filter(u => u.rol === \"consultant\").length;\n  const admins = users.filter(u => u.rol === \"admin\").length;\n\n  const columns = [\n    {\n      key: \"user\",\n      header: \"Kullanıcı\",\n      render: (user: User) => (\n        <div className=\"flex items-center space-x-3\">\n          <Avatar className=\"h-10 w-10\">\n            <AvatarFallback>\n              {getInitials(user.ad, user.soyad)}\n            </AvatarFallback>\n          </Avatar>\n          <div>\n            <p className=\"text-sm font-medium text-foreground\">\n              {user.ad} {user.soyad}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">{user.email}</p>\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: \"username\",\n      header: \"Kullanıcı Adı\",\n      render: (user: User) => (\n        <span className=\"text-sm font-mono\">{user.username}</span>\n      ),\n    },\n    {\n      key: \"telefon\",\n      header: \"Telefon\",\n      render: (user: User) => (\n        <span className=\"text-sm\">{user.telefon || \"-\"}</span>\n      ),\n    },\n    {\n      key: \"rol\",\n      header: \"Rol\",\n      render: (user: User) => (\n        <Badge variant={getRoleBadgeVariant(user.rol)}>\n          {getRoleText(user.rol)}\n        </Badge>\n      ),\n    },\n    {\n      key: \"departman\",\n      header: \"Departman\",\n      render: (user: User) => (\n        <span className=\"text-sm\">{user.departman || \"Belirtilmemiş\"}</span>\n      ),\n    },\n    {\n      key: \"son_giris\",\n      header: \"Son Giriş\",\n      render: (user: User) => (\n        <span className=\"text-sm\">{formatDate(user.son_giris)}</span>\n      ),\n    },\n    {\n      key: \"durum\",\n      header: \"Durum\",\n      render: (user: User) => (\n        <Badge variant={user.durum ? \"default\" : \"secondary\"}>\n          {user.durum ? \"Aktif\" : \"Pasif\"}\n        </Badge>\n      ),\n    },\n    {\n      key: \"actions\",\n      header: \"İşlemler\",\n      render: (user: User) => (\n        <div className=\"flex items-center space-x-2\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            data-testid={`view-user-${user.id}`}\n          >\n            <Eye className=\"h-4 w-4\" />\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            data-testid={`edit-user-${user.id}`}\n          >\n            <Edit className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  const handleAddUser = () => {\n    setIsAddModalOpen(true);\n  };\n\n  const onAddUserSubmit = (data: AddUserFormData) => {\n    addUserMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-semibold text-foreground\">Kullanıcı Yönetimi</h1>\n        <p className=\"text-muted-foreground\">\n          Sistem kullanıcılarını yönetin ve yetkilerini düzenleyin\n        </p>\n      </div>\n\n      {/* User Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <StatCard\n          title=\"Toplam Kullanıcı\"\n          value={totalUsers}\n          icon={UserCog}\n          iconBgColor=\"bg-primary/10\"\n        />\n        \n        <StatCard\n          title=\"Danışmanlar\"\n          value={consultants}\n          icon={Users}\n          iconBgColor=\"bg-accent/10\"\n        />\n        \n        <StatCard\n          title=\"Adminler\"\n          value={admins}\n          icon={Shield}\n          iconBgColor=\"bg-secondary/10\"\n        />\n      </div>\n\n      <DataTable\n        data={users}\n        columns={columns}\n        searchPlaceholder=\"Kullanıcı ara...\"\n        onAdd={handleAddUser}\n        addButtonText=\"Kullanıcı Ekle\"\n        isLoading={isLoading}\n      />\n\n      {/* Add User Modal */}\n      <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <DialogTitle>Yeni Kullanıcı Ekle</DialogTitle>\n            <DialogDescription>\n              Yeni kullanıcı bilgilerini girin. Gerekli alanları doldurun.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Form {...addUserForm}>\n            <form onSubmit={addUserForm.handleSubmit(onAddUserSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={addUserForm.control}\n                  name=\"ad\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Ad *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Kullanıcı adı\" {...field} data-testid=\"user-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={addUserForm.control}\n                  name=\"soyad\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Soyad *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Kullanıcı soyadı\" {...field} data-testid=\"user-surname\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={addUserForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>E-posta *</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"ornek@email.com\" {...field} data-testid=\"user-email\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={addUserForm.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Kullanıcı Adı *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"kullanici_adi\" {...field} data-testid=\"user-username\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={addUserForm.control}\n                  name=\"telefon\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Telefon</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"05XX XXX XX XX\" {...field} data-testid=\"user-phone\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={addUserForm.control}\n                  name=\"rol\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Rol *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value} data-testid=\"user-role\">\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Rol seçin\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"consultant\">Danışman</SelectItem>\n                          <SelectItem value=\"admin\">Admin</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={addUserForm.control}\n                  name=\"departman\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Departman</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Satış, Pazarlama, vs.\" {...field} data-testid=\"user-department\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={addUserForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Şifre *</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"En az 6 karakter\" {...field} data-testid=\"user-password\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={addUserForm.control}\n                name=\"notlar\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notlar</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Kullanıcı hakkında notlar...\"\n                        className=\"resize-none\"\n                        {...field}\n                        data-testid=\"user-notes\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-4 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsAddModalOpen(false)}\n                  data-testid=\"cancel-user\"\n                >\n                  İptal\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={addUserMutation.isPending}\n                  data-testid=\"submit-user\"\n                >\n                  {addUserMutation.isPending ? \"Ekleniyor...\" : \"Kullanıcı Ekle\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":15066},"client/src/components/charts/revenue-chart.tsx":{"content":"import {\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from \"recharts\";\n\nconst data = [\n  { month: \"Ocak\", revenue: 180000 },\n  { month: \"Şubat\", revenue: 220000 },\n  { month: \"Mart\", revenue: 195000 },\n  { month: \"Nisan\", revenue: 280000 },\n  { month: \"Mayıs\", revenue: 245000 },\n  { month: \"Haziran\", revenue: 310000 },\n];\n\nexport function RevenueChart() {\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <LineChart data={data}>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n        <XAxis \n          dataKey=\"month\" \n          stroke=\"hsl(var(--muted-foreground))\"\n          fontSize={12}\n        />\n        <YAxis \n          stroke=\"hsl(var(--muted-foreground))\"\n          fontSize={12}\n          tickFormatter={(value) => `₺${(value / 1000)}K`}\n        />\n        <Tooltip \n          formatter={(value: number) => [`₺${value.toLocaleString('tr-TR')}`, \"Ciro\"]}\n          labelStyle={{ color: \"hsl(var(--foreground))\" }}\n          contentStyle={{ \n            backgroundColor: \"hsl(var(--card))\", \n            border: \"1px solid hsl(var(--border))\",\n            borderRadius: \"8px\"\n          }}\n        />\n        <Line\n          type=\"monotone\"\n          dataKey=\"revenue\"\n          stroke=\"hsl(var(--primary))\"\n          strokeWidth={3}\n          dot={{ fill: \"hsl(var(--primary))\", strokeWidth: 2, r: 4 }}\n          activeDot={{ r: 6, fill: \"hsl(var(--primary))\" }}\n        />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}\n","size_bytes":1541},"client/src/components/charts/transactions-chart.tsx":{"content":"import {\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  Tooltip,\n  Legend,\n} from \"recharts\";\n\nconst data = [\n  { name: \"Tamamlandı\", value: 67, color: \"hsl(var(--accent))\" },\n  { name: \"İşlemde\", value: 15, color: \"hsl(var(--chart-3))\" },\n  { name: \"İptal\", value: 5, color: \"hsl(var(--destructive))\" },\n];\n\nexport function TransactionsChart() {\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <PieChart>\n        <Pie\n          data={data}\n          cx=\"50%\"\n          cy=\"50%\"\n          innerRadius={60}\n          outerRadius={100}\n          paddingAngle={5}\n          dataKey=\"value\"\n        >\n          {data.map((entry, index) => (\n            <Cell key={`cell-${index}`} fill={entry.color} />\n          ))}\n        </Pie>\n        <Tooltip \n          formatter={(value: number) => [value, \"İşlem\"]}\n          contentStyle={{ \n            backgroundColor: \"hsl(var(--card))\", \n            border: \"1px solid hsl(var(--border))\",\n            borderRadius: \"8px\"\n          }}\n        />\n        <Legend \n          verticalAlign=\"bottom\" \n          height={36}\n          wrapperStyle={{ fontSize: \"14px\" }}\n        />\n      </PieChart>\n    </ResponsiveContainer>\n  );\n}\n","size_bytes":1204},"client/src/components/layout/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, Menu, Plus } from \"lucide-react\";\n\ninterface HeaderProps {\n  title: string;\n  onMenuClick?: () => void;\n  onAddClick?: () => void;\n  addButtonText?: string;\n}\n\nexport function Header({ \n  title, \n  onMenuClick, \n  onAddClick, \n  addButtonText = \"Ekle\" \n}: HeaderProps) {\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4 flex items-center justify-between\">\n      <div className=\"flex items-center space-x-4\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"md:hidden\"\n          onClick={onMenuClick}\n          data-testid=\"menu-button\"\n        >\n          <Menu className=\"h-5 w-5\" />\n        </Button>\n        <h1 className=\"text-2xl font-semibold text-foreground\">{title}</h1>\n      </div>\n      \n      <div className=\"flex items-center space-x-4\">\n        {/* Notifications */}\n        <div className=\"relative\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className=\"relative\"\n            data-testid=\"notifications-button\"\n          >\n            <Bell className=\"h-5 w-5\" />\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs\"\n            >\n              3\n            </Badge>\n          </Button>\n        </div>\n\n        {/* Quick Actions */}\n        {onAddClick && (\n          <Button \n            onClick={onAddClick}\n            size=\"sm\"\n            data-testid=\"quick-add-button\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            <span className=\"hidden sm:inline\">{addButtonText}</span>\n          </Button>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":1804},"client/src/components/layout/sidebar.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  BarChart3, \n  Users, \n  MapPin, \n  Handshake, \n  FileText, \n  PieChart, \n  UserCog, \n  Calculator,\n  LogOut,\n  Building\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\n\nconst navigationItems = [\n  { href: \"/\", label: \"Dashboard\", icon: BarChart3, roles: [\"admin\", \"consultant\"] },\n  { href: \"/clients\", label: \"Müşteriler\", icon: Users, roles: [\"admin\", \"consultant\"] },\n  { href: \"/properties\", label: \"Gayrimenkuller\", icon: MapPin, roles: [\"admin\", \"consultant\"] },\n  { href: \"/transactions\", label: \"İşlemler\", icon: Handshake, roles: [\"admin\", \"consultant\"] },\n  { href: \"/documents\", label: \"Belgeler\", icon: FileText, roles: [\"admin\", \"consultant\"] },\n  { href: \"/reports\", label: \"Raporlar\", icon: PieChart, roles: [\"admin\", \"consultant\"] },\n  { href: \"/users\", label: \"Kullanıcılar\", icon: UserCog, roles: [\"admin\"] },\n  { href: \"/accounting\", label: \"Muhasebe\", icon: Calculator, roles: [\"admin\"] },\n];\n\ninterface SidebarProps {\n  isMobileOpen?: boolean;\n  onMobileClose?: () => void;\n}\n\nexport function Sidebar({ isMobileOpen = false, onMobileClose }: SidebarProps) {\n  const { user, logoutMutation } = useAuth();\n  const [location] = useLocation();\n\n  if (!user) return null;\n\n  const getInitials = (ad: string, soyad: string) => {\n    return `${ad.charAt(0)}${soyad.charAt(0)}`.toUpperCase();\n  };\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n    onMobileClose?.();\n  };\n\n  const filteredNav = navigationItems.filter(item => \n    item.roles.includes(user.rol)\n  );\n\n  return (\n    <div className={cn(\n      \"bg-card border-r border-border w-64 flex-shrink-0 flex flex-col h-full\",\n      \"md:relative md:translate-x-0 transition-transform duration-300\",\n      isMobileOpen ? \"translate-x-0\" : \"-translate-x-full md:translate-x-0\"\n    )}>\n      {/* Logo */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"h-10 w-10 bg-primary rounded-lg flex items-center justify-center\">\n            <Building className=\"h-6 w-6 text-primary-foreground\" />\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold text-foreground\">GayriCRM</h2>\n            <p className=\"text-xs text-muted-foreground\">\n              {user.rol === \"admin\" ? \"Admin\" : \"Danışman\"}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        {filteredNav.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.href;\n          \n          return (\n            <Link key={item.href} href={item.href}>\n              <Button\n                variant={isActive ? \"default\" : \"ghost\"}\n                className={cn(\n                  \"w-full justify-start space-x-3 h-11\",\n                  isActive \n                    ? \"bg-primary text-primary-foreground\" \n                    : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n                )}\n                onClick={onMobileClose}\n                data-testid={`nav-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <Icon className=\"h-5 w-5\" />\n                <span>{item.label}</span>\n              </Button>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* User Profile */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center space-x-3 mb-3\">\n          <Avatar className=\"h-10 w-10\">\n            <AvatarFallback className=\"bg-accent text-accent-foreground\">\n              {getInitials(user.ad, user.soyad)}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-foreground truncate\">\n              {user.ad} {user.soyad}\n            </p>\n            <p className=\"text-xs text-muted-foreground truncate\">\n              {user.email}\n            </p>\n          </div>\n        </div>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"w-full\"\n          onClick={handleLogout}\n          disabled={logoutMutation.isPending}\n          data-testid=\"logout-button\"\n        >\n          <LogOut className=\"h-4 w-4 mr-2\" />\n          Çıkış Yap\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4522},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/data-table.tsx":{"content":"import {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Plus } from \"lucide-react\";\n\ninterface DataTableProps<T> {\n  data: T[];\n  columns: {\n    key: string;\n    header: string;\n    render?: (item: T) => React.ReactNode;\n  }[];\n  searchPlaceholder?: string;\n  onAdd?: () => void;\n  addButtonText?: string;\n  isLoading?: boolean;\n}\n\nexport function DataTable<T extends Record<string, any>>({\n  data,\n  columns,\n  searchPlaceholder = \"Ara...\",\n  onAdd,\n  addButtonText = \"Ekle\",\n  isLoading = false,\n}: DataTableProps<T>) {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n            <Input\n              placeholder={searchPlaceholder}\n              className=\"pl-10 w-80\"\n              data-testid=\"search-input\"\n            />\n          </div>\n        </div>\n        {onAdd && (\n          <Button onClick={onAdd} data-testid=\"add-button\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            {addButtonText}\n          </Button>\n        )}\n      </div>\n\n      <Card className=\"border\">\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow className=\"bg-muted\">\n                {columns.map((column) => (\n                  <TableHead\n                    key={column.key}\n                    className=\"px-6 py-3 text-left text-sm font-medium text-foreground\"\n                  >\n                    {column.header}\n                  </TableHead>\n                ))}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {isLoading ? (\n                <TableRow>\n                  <TableCell colSpan={columns.length} className=\"text-center py-8\">\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"h-6 w-6 animate-spin rounded-full border-2 border-primary border-t-transparent\" />\n                      <span className=\"ml-2\">Yükleniyor...</span>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ) : data.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={columns.length} className=\"text-center py-8 text-muted-foreground\">\n                    Kayıt bulunamadı\n                  </TableCell>\n                </TableRow>\n              ) : (\n                data.map((item, index) => (\n                  <TableRow key={item.id || index} className=\"hover:bg-muted/50\">\n                    {columns.map((column) => (\n                      <TableCell key={column.key} className=\"px-6 py-4\">\n                        {column.render ? column.render(item) : item[column.key]}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3301},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/stat-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  change?: string;\n  changeType?: \"positive\" | \"negative\" | \"neutral\";\n  icon: LucideIcon;\n  iconBgColor?: string;\n  className?: string;\n}\n\nexport function StatCard({\n  title,\n  value,\n  change,\n  changeType = \"neutral\",\n  icon: Icon,\n  iconBgColor = \"bg-primary/10\",\n  className,\n}: StatCardProps) {\n  const changeColorMap = {\n    positive: \"text-accent\",\n    negative: \"text-destructive\", \n    neutral: \"text-muted-foreground\",\n  };\n\n  return (\n    <Card className={cn(\"border card-hover\", className)} data-testid={`stat-card-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-muted-foreground text-sm font-medium\">{title}</p>\n            <p className=\"text-2xl font-bold text-foreground mt-2\">{value}</p>\n            {change && (\n              <p className={cn(\"text-sm mt-1\", changeColorMap[changeType])}>\n                {change}\n              </p>\n            )}\n          </div>\n          <div className={cn(\"h-12 w-12 rounded-lg flex items-center justify-center\", iconBgColor)}>\n            <Icon className=\"text-xl\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1444},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}